
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Departement
 * 
 */
export type Departement = $Result.DefaultSelection<Prisma.$DepartementPayload>
/**
 * Model SalaireHeure
 * 
 */
export type SalaireHeure = $Result.DefaultSelection<Prisma.$SalaireHeurePayload>
/**
 * Model Titre
 * 
 */
export type Titre = $Result.DefaultSelection<Prisma.$TitrePayload>
/**
 * Model Agent
 * 
 */
export type Agent = $Result.DefaultSelection<Prisma.$AgentPayload>
/**
 * Model Presence
 * 
 */
export type Presence = $Result.DefaultSelection<Prisma.$PresencePayload>
/**
 * Model AgentMatin
 * 
 */
export type AgentMatin = $Result.DefaultSelection<Prisma.$AgentMatinPayload>
/**
 * Model AgentSoiree
 * 
 */
export type AgentSoiree = $Result.DefaultSelection<Prisma.$AgentSoireePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Departements
 * const departements = await prisma.departement.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Departements
   * const departements = await prisma.departement.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.departement`: Exposes CRUD operations for the **Departement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departements
    * const departements = await prisma.departement.findMany()
    * ```
    */
  get departement(): Prisma.DepartementDelegate<ExtArgs>;

  /**
   * `prisma.salaireHeure`: Exposes CRUD operations for the **SalaireHeure** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SalaireHeures
    * const salaireHeures = await prisma.salaireHeure.findMany()
    * ```
    */
  get salaireHeure(): Prisma.SalaireHeureDelegate<ExtArgs>;

  /**
   * `prisma.titre`: Exposes CRUD operations for the **Titre** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Titres
    * const titres = await prisma.titre.findMany()
    * ```
    */
  get titre(): Prisma.TitreDelegate<ExtArgs>;

  /**
   * `prisma.agent`: Exposes CRUD operations for the **Agent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agents
    * const agents = await prisma.agent.findMany()
    * ```
    */
  get agent(): Prisma.AgentDelegate<ExtArgs>;

  /**
   * `prisma.presence`: Exposes CRUD operations for the **Presence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Presences
    * const presences = await prisma.presence.findMany()
    * ```
    */
  get presence(): Prisma.PresenceDelegate<ExtArgs>;

  /**
   * `prisma.agentMatin`: Exposes CRUD operations for the **AgentMatin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AgentMatins
    * const agentMatins = await prisma.agentMatin.findMany()
    * ```
    */
  get agentMatin(): Prisma.AgentMatinDelegate<ExtArgs>;

  /**
   * `prisma.agentSoiree`: Exposes CRUD operations for the **AgentSoiree** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AgentSoirees
    * const agentSoirees = await prisma.agentSoiree.findMany()
    * ```
    */
  get agentSoiree(): Prisma.AgentSoireeDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.0.0
   * Query Engine version: 5dbef10bdbfb579e07d35cc85fb1518d357cb99e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Departement: 'Departement',
    SalaireHeure: 'SalaireHeure',
    Titre: 'Titre',
    Agent: 'Agent',
    Presence: 'Presence',
    AgentMatin: 'AgentMatin',
    AgentSoiree: 'AgentSoiree'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "departement" | "salaireHeure" | "titre" | "agent" | "presence" | "agentMatin" | "agentSoiree"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Departement: {
        payload: Prisma.$DepartementPayload<ExtArgs>
        fields: Prisma.DepartementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartementPayload>
          }
          findFirst: {
            args: Prisma.DepartementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartementPayload>
          }
          findMany: {
            args: Prisma.DepartementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartementPayload>[]
          }
          create: {
            args: Prisma.DepartementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartementPayload>
          }
          createMany: {
            args: Prisma.DepartementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DepartementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartementPayload>
          }
          update: {
            args: Prisma.DepartementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartementPayload>
          }
          deleteMany: {
            args: Prisma.DepartementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DepartementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartementPayload>
          }
          aggregate: {
            args: Prisma.DepartementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartement>
          }
          groupBy: {
            args: Prisma.DepartementGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartementGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartementCountArgs<ExtArgs>
            result: $Utils.Optional<DepartementCountAggregateOutputType> | number
          }
        }
      }
      SalaireHeure: {
        payload: Prisma.$SalaireHeurePayload<ExtArgs>
        fields: Prisma.SalaireHeureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SalaireHeureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaireHeurePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SalaireHeureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaireHeurePayload>
          }
          findFirst: {
            args: Prisma.SalaireHeureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaireHeurePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SalaireHeureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaireHeurePayload>
          }
          findMany: {
            args: Prisma.SalaireHeureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaireHeurePayload>[]
          }
          create: {
            args: Prisma.SalaireHeureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaireHeurePayload>
          }
          createMany: {
            args: Prisma.SalaireHeureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SalaireHeureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaireHeurePayload>
          }
          update: {
            args: Prisma.SalaireHeureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaireHeurePayload>
          }
          deleteMany: {
            args: Prisma.SalaireHeureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SalaireHeureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SalaireHeureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaireHeurePayload>
          }
          aggregate: {
            args: Prisma.SalaireHeureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSalaireHeure>
          }
          groupBy: {
            args: Prisma.SalaireHeureGroupByArgs<ExtArgs>
            result: $Utils.Optional<SalaireHeureGroupByOutputType>[]
          }
          count: {
            args: Prisma.SalaireHeureCountArgs<ExtArgs>
            result: $Utils.Optional<SalaireHeureCountAggregateOutputType> | number
          }
        }
      }
      Titre: {
        payload: Prisma.$TitrePayload<ExtArgs>
        fields: Prisma.TitreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TitreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitrePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TitreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitrePayload>
          }
          findFirst: {
            args: Prisma.TitreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitrePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TitreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitrePayload>
          }
          findMany: {
            args: Prisma.TitreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitrePayload>[]
          }
          create: {
            args: Prisma.TitreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitrePayload>
          }
          createMany: {
            args: Prisma.TitreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TitreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitrePayload>
          }
          update: {
            args: Prisma.TitreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitrePayload>
          }
          deleteMany: {
            args: Prisma.TitreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TitreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TitreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitrePayload>
          }
          aggregate: {
            args: Prisma.TitreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTitre>
          }
          groupBy: {
            args: Prisma.TitreGroupByArgs<ExtArgs>
            result: $Utils.Optional<TitreGroupByOutputType>[]
          }
          count: {
            args: Prisma.TitreCountArgs<ExtArgs>
            result: $Utils.Optional<TitreCountAggregateOutputType> | number
          }
        }
      }
      Agent: {
        payload: Prisma.$AgentPayload<ExtArgs>
        fields: Prisma.AgentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          findFirst: {
            args: Prisma.AgentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          findMany: {
            args: Prisma.AgentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>[]
          }
          create: {
            args: Prisma.AgentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          createMany: {
            args: Prisma.AgentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AgentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          update: {
            args: Prisma.AgentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          deleteMany: {
            args: Prisma.AgentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AgentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          aggregate: {
            args: Prisma.AgentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgent>
          }
          groupBy: {
            args: Prisma.AgentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgentCountArgs<ExtArgs>
            result: $Utils.Optional<AgentCountAggregateOutputType> | number
          }
        }
      }
      Presence: {
        payload: Prisma.$PresencePayload<ExtArgs>
        fields: Prisma.PresenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PresenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PresenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload>
          }
          findFirst: {
            args: Prisma.PresenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PresenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload>
          }
          findMany: {
            args: Prisma.PresenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload>[]
          }
          create: {
            args: Prisma.PresenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload>
          }
          createMany: {
            args: Prisma.PresenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PresenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload>
          }
          update: {
            args: Prisma.PresenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload>
          }
          deleteMany: {
            args: Prisma.PresenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PresenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PresenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload>
          }
          aggregate: {
            args: Prisma.PresenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePresence>
          }
          groupBy: {
            args: Prisma.PresenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<PresenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.PresenceCountArgs<ExtArgs>
            result: $Utils.Optional<PresenceCountAggregateOutputType> | number
          }
        }
      }
      AgentMatin: {
        payload: Prisma.$AgentMatinPayload<ExtArgs>
        fields: Prisma.AgentMatinFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgentMatinFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentMatinPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgentMatinFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentMatinPayload>
          }
          findFirst: {
            args: Prisma.AgentMatinFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentMatinPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgentMatinFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentMatinPayload>
          }
          findMany: {
            args: Prisma.AgentMatinFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentMatinPayload>[]
          }
          create: {
            args: Prisma.AgentMatinCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentMatinPayload>
          }
          createMany: {
            args: Prisma.AgentMatinCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AgentMatinDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentMatinPayload>
          }
          update: {
            args: Prisma.AgentMatinUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentMatinPayload>
          }
          deleteMany: {
            args: Prisma.AgentMatinDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgentMatinUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AgentMatinUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentMatinPayload>
          }
          aggregate: {
            args: Prisma.AgentMatinAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgentMatin>
          }
          groupBy: {
            args: Prisma.AgentMatinGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgentMatinGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgentMatinCountArgs<ExtArgs>
            result: $Utils.Optional<AgentMatinCountAggregateOutputType> | number
          }
        }
      }
      AgentSoiree: {
        payload: Prisma.$AgentSoireePayload<ExtArgs>
        fields: Prisma.AgentSoireeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgentSoireeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentSoireePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgentSoireeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentSoireePayload>
          }
          findFirst: {
            args: Prisma.AgentSoireeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentSoireePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgentSoireeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentSoireePayload>
          }
          findMany: {
            args: Prisma.AgentSoireeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentSoireePayload>[]
          }
          create: {
            args: Prisma.AgentSoireeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentSoireePayload>
          }
          createMany: {
            args: Prisma.AgentSoireeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AgentSoireeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentSoireePayload>
          }
          update: {
            args: Prisma.AgentSoireeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentSoireePayload>
          }
          deleteMany: {
            args: Prisma.AgentSoireeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgentSoireeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AgentSoireeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentSoireePayload>
          }
          aggregate: {
            args: Prisma.AgentSoireeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgentSoiree>
          }
          groupBy: {
            args: Prisma.AgentSoireeGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgentSoireeGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgentSoireeCountArgs<ExtArgs>
            result: $Utils.Optional<AgentSoireeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DepartementCountOutputType
   */

  export type DepartementCountOutputType = {
    agents: number
  }

  export type DepartementCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agents?: boolean | DepartementCountOutputTypeCountAgentsArgs
  }

  // Custom InputTypes
  /**
   * DepartementCountOutputType without action
   */
  export type DepartementCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartementCountOutputType
     */
    select?: DepartementCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartementCountOutputType without action
   */
  export type DepartementCountOutputTypeCountAgentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentWhereInput
  }


  /**
   * Count Type SalaireHeureCountOutputType
   */

  export type SalaireHeureCountOutputType = {
    titres: number
  }

  export type SalaireHeureCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    titres?: boolean | SalaireHeureCountOutputTypeCountTitresArgs
  }

  // Custom InputTypes
  /**
   * SalaireHeureCountOutputType without action
   */
  export type SalaireHeureCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaireHeureCountOutputType
     */
    select?: SalaireHeureCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SalaireHeureCountOutputType without action
   */
  export type SalaireHeureCountOutputTypeCountTitresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TitreWhereInput
  }


  /**
   * Count Type TitreCountOutputType
   */

  export type TitreCountOutputType = {
    agents: number
  }

  export type TitreCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agents?: boolean | TitreCountOutputTypeCountAgentsArgs
  }

  // Custom InputTypes
  /**
   * TitreCountOutputType without action
   */
  export type TitreCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TitreCountOutputType
     */
    select?: TitreCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TitreCountOutputType without action
   */
  export type TitreCountOutputTypeCountAgentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentWhereInput
  }


  /**
   * Count Type AgentCountOutputType
   */

  export type AgentCountOutputType = {
    presences: number
    agentMatin: number
    agentSoiree: number
  }

  export type AgentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presences?: boolean | AgentCountOutputTypeCountPresencesArgs
    agentMatin?: boolean | AgentCountOutputTypeCountAgentMatinArgs
    agentSoiree?: boolean | AgentCountOutputTypeCountAgentSoireeArgs
  }

  // Custom InputTypes
  /**
   * AgentCountOutputType without action
   */
  export type AgentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentCountOutputType
     */
    select?: AgentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AgentCountOutputType without action
   */
  export type AgentCountOutputTypeCountPresencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresenceWhereInput
  }

  /**
   * AgentCountOutputType without action
   */
  export type AgentCountOutputTypeCountAgentMatinArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentMatinWhereInput
  }

  /**
   * AgentCountOutputType without action
   */
  export type AgentCountOutputTypeCountAgentSoireeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentSoireeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Departement
   */

  export type AggregateDepartement = {
    _count: DepartementCountAggregateOutputType | null
    _avg: DepartementAvgAggregateOutputType | null
    _sum: DepartementSumAggregateOutputType | null
    _min: DepartementMinAggregateOutputType | null
    _max: DepartementMaxAggregateOutputType | null
  }

  export type DepartementAvgAggregateOutputType = {
    id: number | null
  }

  export type DepartementSumAggregateOutputType = {
    id: number | null
  }

  export type DepartementMinAggregateOutputType = {
    id: number | null
    Nom: string | null
  }

  export type DepartementMaxAggregateOutputType = {
    id: number | null
    Nom: string | null
  }

  export type DepartementCountAggregateOutputType = {
    id: number
    Nom: number
    _all: number
  }


  export type DepartementAvgAggregateInputType = {
    id?: true
  }

  export type DepartementSumAggregateInputType = {
    id?: true
  }

  export type DepartementMinAggregateInputType = {
    id?: true
    Nom?: true
  }

  export type DepartementMaxAggregateInputType = {
    id?: true
    Nom?: true
  }

  export type DepartementCountAggregateInputType = {
    id?: true
    Nom?: true
    _all?: true
  }

  export type DepartementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departement to aggregate.
     */
    where?: DepartementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departements to fetch.
     */
    orderBy?: DepartementOrderByWithRelationInput | DepartementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departements
    **/
    _count?: true | DepartementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartementMaxAggregateInputType
  }

  export type GetDepartementAggregateType<T extends DepartementAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartement[P]>
      : GetScalarType<T[P], AggregateDepartement[P]>
  }




  export type DepartementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartementWhereInput
    orderBy?: DepartementOrderByWithAggregationInput | DepartementOrderByWithAggregationInput[]
    by: DepartementScalarFieldEnum[] | DepartementScalarFieldEnum
    having?: DepartementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartementCountAggregateInputType | true
    _avg?: DepartementAvgAggregateInputType
    _sum?: DepartementSumAggregateInputType
    _min?: DepartementMinAggregateInputType
    _max?: DepartementMaxAggregateInputType
  }

  export type DepartementGroupByOutputType = {
    id: number
    Nom: string
    _count: DepartementCountAggregateOutputType | null
    _avg: DepartementAvgAggregateOutputType | null
    _sum: DepartementSumAggregateOutputType | null
    _min: DepartementMinAggregateOutputType | null
    _max: DepartementMaxAggregateOutputType | null
  }

  type GetDepartementGroupByPayload<T extends DepartementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartementGroupByOutputType[P]>
            : GetScalarType<T[P], DepartementGroupByOutputType[P]>
        }
      >
    >


  export type DepartementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nom?: boolean
    agents?: boolean | Departement$agentsArgs<ExtArgs>
    _count?: boolean | DepartementCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["departement"]>


  export type DepartementSelectScalar = {
    id?: boolean
    Nom?: boolean
  }

  export type DepartementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agents?: boolean | Departement$agentsArgs<ExtArgs>
    _count?: boolean | DepartementCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $DepartementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Departement"
    objects: {
      agents: Prisma.$AgentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Nom: string
    }, ExtArgs["result"]["departement"]>
    composites: {}
  }

  type DepartementGetPayload<S extends boolean | null | undefined | DepartementDefaultArgs> = $Result.GetResult<Prisma.$DepartementPayload, S>

  type DepartementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DepartementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DepartementCountAggregateInputType | true
    }

  export interface DepartementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Departement'], meta: { name: 'Departement' } }
    /**
     * Find zero or one Departement that matches the filter.
     * @param {DepartementFindUniqueArgs} args - Arguments to find a Departement
     * @example
     * // Get one Departement
     * const departement = await prisma.departement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartementFindUniqueArgs>(args: SelectSubset<T, DepartementFindUniqueArgs<ExtArgs>>): Prisma__DepartementClient<$Result.GetResult<Prisma.$DepartementPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Departement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DepartementFindUniqueOrThrowArgs} args - Arguments to find a Departement
     * @example
     * // Get one Departement
     * const departement = await prisma.departement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartementFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartementClient<$Result.GetResult<Prisma.$DepartementPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Departement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartementFindFirstArgs} args - Arguments to find a Departement
     * @example
     * // Get one Departement
     * const departement = await prisma.departement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartementFindFirstArgs>(args?: SelectSubset<T, DepartementFindFirstArgs<ExtArgs>>): Prisma__DepartementClient<$Result.GetResult<Prisma.$DepartementPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Departement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartementFindFirstOrThrowArgs} args - Arguments to find a Departement
     * @example
     * // Get one Departement
     * const departement = await prisma.departement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartementFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartementFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartementClient<$Result.GetResult<Prisma.$DepartementPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Departements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departements
     * const departements = await prisma.departement.findMany()
     * 
     * // Get first 10 Departements
     * const departements = await prisma.departement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departementWithIdOnly = await prisma.departement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartementFindManyArgs>(args?: SelectSubset<T, DepartementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartementPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Departement.
     * @param {DepartementCreateArgs} args - Arguments to create a Departement.
     * @example
     * // Create one Departement
     * const Departement = await prisma.departement.create({
     *   data: {
     *     // ... data to create a Departement
     *   }
     * })
     * 
     */
    create<T extends DepartementCreateArgs>(args: SelectSubset<T, DepartementCreateArgs<ExtArgs>>): Prisma__DepartementClient<$Result.GetResult<Prisma.$DepartementPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Departements.
     * @param {DepartementCreateManyArgs} args - Arguments to create many Departements.
     * @example
     * // Create many Departements
     * const departement = await prisma.departement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartementCreateManyArgs>(args?: SelectSubset<T, DepartementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Departement.
     * @param {DepartementDeleteArgs} args - Arguments to delete one Departement.
     * @example
     * // Delete one Departement
     * const Departement = await prisma.departement.delete({
     *   where: {
     *     // ... filter to delete one Departement
     *   }
     * })
     * 
     */
    delete<T extends DepartementDeleteArgs>(args: SelectSubset<T, DepartementDeleteArgs<ExtArgs>>): Prisma__DepartementClient<$Result.GetResult<Prisma.$DepartementPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Departement.
     * @param {DepartementUpdateArgs} args - Arguments to update one Departement.
     * @example
     * // Update one Departement
     * const departement = await prisma.departement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartementUpdateArgs>(args: SelectSubset<T, DepartementUpdateArgs<ExtArgs>>): Prisma__DepartementClient<$Result.GetResult<Prisma.$DepartementPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Departements.
     * @param {DepartementDeleteManyArgs} args - Arguments to filter Departements to delete.
     * @example
     * // Delete a few Departements
     * const { count } = await prisma.departement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartementDeleteManyArgs>(args?: SelectSubset<T, DepartementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departements
     * const departement = await prisma.departement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartementUpdateManyArgs>(args: SelectSubset<T, DepartementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Departement.
     * @param {DepartementUpsertArgs} args - Arguments to update or create a Departement.
     * @example
     * // Update or create a Departement
     * const departement = await prisma.departement.upsert({
     *   create: {
     *     // ... data to create a Departement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Departement we want to update
     *   }
     * })
     */
    upsert<T extends DepartementUpsertArgs>(args: SelectSubset<T, DepartementUpsertArgs<ExtArgs>>): Prisma__DepartementClient<$Result.GetResult<Prisma.$DepartementPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Departements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartementCountArgs} args - Arguments to filter Departements to count.
     * @example
     * // Count the number of Departements
     * const count = await prisma.departement.count({
     *   where: {
     *     // ... the filter for the Departements we want to count
     *   }
     * })
    **/
    count<T extends DepartementCountArgs>(
      args?: Subset<T, DepartementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Departement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartementAggregateArgs>(args: Subset<T, DepartementAggregateArgs>): Prisma.PrismaPromise<GetDepartementAggregateType<T>>

    /**
     * Group by Departement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartementGroupByArgs['orderBy'] }
        : { orderBy?: DepartementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Departement model
   */
  readonly fields: DepartementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Departement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agents<T extends Departement$agentsArgs<ExtArgs> = {}>(args?: Subset<T, Departement$agentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Departement model
   */ 
  interface DepartementFieldRefs {
    readonly id: FieldRef<"Departement", 'Int'>
    readonly Nom: FieldRef<"Departement", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Departement findUnique
   */
  export type DepartementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departement
     */
    select?: DepartementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartementInclude<ExtArgs> | null
    /**
     * Filter, which Departement to fetch.
     */
    where: DepartementWhereUniqueInput
  }

  /**
   * Departement findUniqueOrThrow
   */
  export type DepartementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departement
     */
    select?: DepartementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartementInclude<ExtArgs> | null
    /**
     * Filter, which Departement to fetch.
     */
    where: DepartementWhereUniqueInput
  }

  /**
   * Departement findFirst
   */
  export type DepartementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departement
     */
    select?: DepartementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartementInclude<ExtArgs> | null
    /**
     * Filter, which Departement to fetch.
     */
    where?: DepartementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departements to fetch.
     */
    orderBy?: DepartementOrderByWithRelationInput | DepartementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departements.
     */
    cursor?: DepartementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departements.
     */
    distinct?: DepartementScalarFieldEnum | DepartementScalarFieldEnum[]
  }

  /**
   * Departement findFirstOrThrow
   */
  export type DepartementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departement
     */
    select?: DepartementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartementInclude<ExtArgs> | null
    /**
     * Filter, which Departement to fetch.
     */
    where?: DepartementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departements to fetch.
     */
    orderBy?: DepartementOrderByWithRelationInput | DepartementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departements.
     */
    cursor?: DepartementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departements.
     */
    distinct?: DepartementScalarFieldEnum | DepartementScalarFieldEnum[]
  }

  /**
   * Departement findMany
   */
  export type DepartementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departement
     */
    select?: DepartementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartementInclude<ExtArgs> | null
    /**
     * Filter, which Departements to fetch.
     */
    where?: DepartementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departements to fetch.
     */
    orderBy?: DepartementOrderByWithRelationInput | DepartementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departements.
     */
    cursor?: DepartementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departements.
     */
    skip?: number
    distinct?: DepartementScalarFieldEnum | DepartementScalarFieldEnum[]
  }

  /**
   * Departement create
   */
  export type DepartementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departement
     */
    select?: DepartementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartementInclude<ExtArgs> | null
    /**
     * The data needed to create a Departement.
     */
    data: XOR<DepartementCreateInput, DepartementUncheckedCreateInput>
  }

  /**
   * Departement createMany
   */
  export type DepartementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departements.
     */
    data: DepartementCreateManyInput | DepartementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Departement update
   */
  export type DepartementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departement
     */
    select?: DepartementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartementInclude<ExtArgs> | null
    /**
     * The data needed to update a Departement.
     */
    data: XOR<DepartementUpdateInput, DepartementUncheckedUpdateInput>
    /**
     * Choose, which Departement to update.
     */
    where: DepartementWhereUniqueInput
  }

  /**
   * Departement updateMany
   */
  export type DepartementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departements.
     */
    data: XOR<DepartementUpdateManyMutationInput, DepartementUncheckedUpdateManyInput>
    /**
     * Filter which Departements to update
     */
    where?: DepartementWhereInput
  }

  /**
   * Departement upsert
   */
  export type DepartementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departement
     */
    select?: DepartementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartementInclude<ExtArgs> | null
    /**
     * The filter to search for the Departement to update in case it exists.
     */
    where: DepartementWhereUniqueInput
    /**
     * In case the Departement found by the `where` argument doesn't exist, create a new Departement with this data.
     */
    create: XOR<DepartementCreateInput, DepartementUncheckedCreateInput>
    /**
     * In case the Departement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartementUpdateInput, DepartementUncheckedUpdateInput>
  }

  /**
   * Departement delete
   */
  export type DepartementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departement
     */
    select?: DepartementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartementInclude<ExtArgs> | null
    /**
     * Filter which Departement to delete.
     */
    where: DepartementWhereUniqueInput
  }

  /**
   * Departement deleteMany
   */
  export type DepartementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departements to delete
     */
    where?: DepartementWhereInput
  }

  /**
   * Departement.agents
   */
  export type Departement$agentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    where?: AgentWhereInput
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    cursor?: AgentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgentScalarFieldEnum | AgentScalarFieldEnum[]
  }

  /**
   * Departement without action
   */
  export type DepartementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departement
     */
    select?: DepartementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartementInclude<ExtArgs> | null
  }


  /**
   * Model SalaireHeure
   */

  export type AggregateSalaireHeure = {
    _count: SalaireHeureCountAggregateOutputType | null
    _avg: SalaireHeureAvgAggregateOutputType | null
    _sum: SalaireHeureSumAggregateOutputType | null
    _min: SalaireHeureMinAggregateOutputType | null
    _max: SalaireHeureMaxAggregateOutputType | null
  }

  export type SalaireHeureAvgAggregateOutputType = {
    id: number | null
    Montant: number | null
  }

  export type SalaireHeureSumAggregateOutputType = {
    id: number | null
    Montant: number | null
  }

  export type SalaireHeureMinAggregateOutputType = {
    id: number | null
    Montant: number | null
  }

  export type SalaireHeureMaxAggregateOutputType = {
    id: number | null
    Montant: number | null
  }

  export type SalaireHeureCountAggregateOutputType = {
    id: number
    Montant: number
    _all: number
  }


  export type SalaireHeureAvgAggregateInputType = {
    id?: true
    Montant?: true
  }

  export type SalaireHeureSumAggregateInputType = {
    id?: true
    Montant?: true
  }

  export type SalaireHeureMinAggregateInputType = {
    id?: true
    Montant?: true
  }

  export type SalaireHeureMaxAggregateInputType = {
    id?: true
    Montant?: true
  }

  export type SalaireHeureCountAggregateInputType = {
    id?: true
    Montant?: true
    _all?: true
  }

  export type SalaireHeureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SalaireHeure to aggregate.
     */
    where?: SalaireHeureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaireHeures to fetch.
     */
    orderBy?: SalaireHeureOrderByWithRelationInput | SalaireHeureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SalaireHeureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaireHeures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaireHeures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SalaireHeures
    **/
    _count?: true | SalaireHeureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SalaireHeureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SalaireHeureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SalaireHeureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SalaireHeureMaxAggregateInputType
  }

  export type GetSalaireHeureAggregateType<T extends SalaireHeureAggregateArgs> = {
        [P in keyof T & keyof AggregateSalaireHeure]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSalaireHeure[P]>
      : GetScalarType<T[P], AggregateSalaireHeure[P]>
  }




  export type SalaireHeureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalaireHeureWhereInput
    orderBy?: SalaireHeureOrderByWithAggregationInput | SalaireHeureOrderByWithAggregationInput[]
    by: SalaireHeureScalarFieldEnum[] | SalaireHeureScalarFieldEnum
    having?: SalaireHeureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SalaireHeureCountAggregateInputType | true
    _avg?: SalaireHeureAvgAggregateInputType
    _sum?: SalaireHeureSumAggregateInputType
    _min?: SalaireHeureMinAggregateInputType
    _max?: SalaireHeureMaxAggregateInputType
  }

  export type SalaireHeureGroupByOutputType = {
    id: number
    Montant: number
    _count: SalaireHeureCountAggregateOutputType | null
    _avg: SalaireHeureAvgAggregateOutputType | null
    _sum: SalaireHeureSumAggregateOutputType | null
    _min: SalaireHeureMinAggregateOutputType | null
    _max: SalaireHeureMaxAggregateOutputType | null
  }

  type GetSalaireHeureGroupByPayload<T extends SalaireHeureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SalaireHeureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SalaireHeureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SalaireHeureGroupByOutputType[P]>
            : GetScalarType<T[P], SalaireHeureGroupByOutputType[P]>
        }
      >
    >


  export type SalaireHeureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Montant?: boolean
    titres?: boolean | SalaireHeure$titresArgs<ExtArgs>
    _count?: boolean | SalaireHeureCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["salaireHeure"]>


  export type SalaireHeureSelectScalar = {
    id?: boolean
    Montant?: boolean
  }

  export type SalaireHeureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    titres?: boolean | SalaireHeure$titresArgs<ExtArgs>
    _count?: boolean | SalaireHeureCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SalaireHeurePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SalaireHeure"
    objects: {
      titres: Prisma.$TitrePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Montant: number
    }, ExtArgs["result"]["salaireHeure"]>
    composites: {}
  }

  type SalaireHeureGetPayload<S extends boolean | null | undefined | SalaireHeureDefaultArgs> = $Result.GetResult<Prisma.$SalaireHeurePayload, S>

  type SalaireHeureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SalaireHeureFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SalaireHeureCountAggregateInputType | true
    }

  export interface SalaireHeureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SalaireHeure'], meta: { name: 'SalaireHeure' } }
    /**
     * Find zero or one SalaireHeure that matches the filter.
     * @param {SalaireHeureFindUniqueArgs} args - Arguments to find a SalaireHeure
     * @example
     * // Get one SalaireHeure
     * const salaireHeure = await prisma.salaireHeure.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SalaireHeureFindUniqueArgs>(args: SelectSubset<T, SalaireHeureFindUniqueArgs<ExtArgs>>): Prisma__SalaireHeureClient<$Result.GetResult<Prisma.$SalaireHeurePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SalaireHeure that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SalaireHeureFindUniqueOrThrowArgs} args - Arguments to find a SalaireHeure
     * @example
     * // Get one SalaireHeure
     * const salaireHeure = await prisma.salaireHeure.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SalaireHeureFindUniqueOrThrowArgs>(args: SelectSubset<T, SalaireHeureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SalaireHeureClient<$Result.GetResult<Prisma.$SalaireHeurePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SalaireHeure that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaireHeureFindFirstArgs} args - Arguments to find a SalaireHeure
     * @example
     * // Get one SalaireHeure
     * const salaireHeure = await prisma.salaireHeure.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SalaireHeureFindFirstArgs>(args?: SelectSubset<T, SalaireHeureFindFirstArgs<ExtArgs>>): Prisma__SalaireHeureClient<$Result.GetResult<Prisma.$SalaireHeurePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SalaireHeure that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaireHeureFindFirstOrThrowArgs} args - Arguments to find a SalaireHeure
     * @example
     * // Get one SalaireHeure
     * const salaireHeure = await prisma.salaireHeure.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SalaireHeureFindFirstOrThrowArgs>(args?: SelectSubset<T, SalaireHeureFindFirstOrThrowArgs<ExtArgs>>): Prisma__SalaireHeureClient<$Result.GetResult<Prisma.$SalaireHeurePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SalaireHeures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaireHeureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SalaireHeures
     * const salaireHeures = await prisma.salaireHeure.findMany()
     * 
     * // Get first 10 SalaireHeures
     * const salaireHeures = await prisma.salaireHeure.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const salaireHeureWithIdOnly = await prisma.salaireHeure.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SalaireHeureFindManyArgs>(args?: SelectSubset<T, SalaireHeureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaireHeurePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SalaireHeure.
     * @param {SalaireHeureCreateArgs} args - Arguments to create a SalaireHeure.
     * @example
     * // Create one SalaireHeure
     * const SalaireHeure = await prisma.salaireHeure.create({
     *   data: {
     *     // ... data to create a SalaireHeure
     *   }
     * })
     * 
     */
    create<T extends SalaireHeureCreateArgs>(args: SelectSubset<T, SalaireHeureCreateArgs<ExtArgs>>): Prisma__SalaireHeureClient<$Result.GetResult<Prisma.$SalaireHeurePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SalaireHeures.
     * @param {SalaireHeureCreateManyArgs} args - Arguments to create many SalaireHeures.
     * @example
     * // Create many SalaireHeures
     * const salaireHeure = await prisma.salaireHeure.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SalaireHeureCreateManyArgs>(args?: SelectSubset<T, SalaireHeureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SalaireHeure.
     * @param {SalaireHeureDeleteArgs} args - Arguments to delete one SalaireHeure.
     * @example
     * // Delete one SalaireHeure
     * const SalaireHeure = await prisma.salaireHeure.delete({
     *   where: {
     *     // ... filter to delete one SalaireHeure
     *   }
     * })
     * 
     */
    delete<T extends SalaireHeureDeleteArgs>(args: SelectSubset<T, SalaireHeureDeleteArgs<ExtArgs>>): Prisma__SalaireHeureClient<$Result.GetResult<Prisma.$SalaireHeurePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SalaireHeure.
     * @param {SalaireHeureUpdateArgs} args - Arguments to update one SalaireHeure.
     * @example
     * // Update one SalaireHeure
     * const salaireHeure = await prisma.salaireHeure.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SalaireHeureUpdateArgs>(args: SelectSubset<T, SalaireHeureUpdateArgs<ExtArgs>>): Prisma__SalaireHeureClient<$Result.GetResult<Prisma.$SalaireHeurePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SalaireHeures.
     * @param {SalaireHeureDeleteManyArgs} args - Arguments to filter SalaireHeures to delete.
     * @example
     * // Delete a few SalaireHeures
     * const { count } = await prisma.salaireHeure.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SalaireHeureDeleteManyArgs>(args?: SelectSubset<T, SalaireHeureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SalaireHeures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaireHeureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SalaireHeures
     * const salaireHeure = await prisma.salaireHeure.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SalaireHeureUpdateManyArgs>(args: SelectSubset<T, SalaireHeureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SalaireHeure.
     * @param {SalaireHeureUpsertArgs} args - Arguments to update or create a SalaireHeure.
     * @example
     * // Update or create a SalaireHeure
     * const salaireHeure = await prisma.salaireHeure.upsert({
     *   create: {
     *     // ... data to create a SalaireHeure
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SalaireHeure we want to update
     *   }
     * })
     */
    upsert<T extends SalaireHeureUpsertArgs>(args: SelectSubset<T, SalaireHeureUpsertArgs<ExtArgs>>): Prisma__SalaireHeureClient<$Result.GetResult<Prisma.$SalaireHeurePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SalaireHeures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaireHeureCountArgs} args - Arguments to filter SalaireHeures to count.
     * @example
     * // Count the number of SalaireHeures
     * const count = await prisma.salaireHeure.count({
     *   where: {
     *     // ... the filter for the SalaireHeures we want to count
     *   }
     * })
    **/
    count<T extends SalaireHeureCountArgs>(
      args?: Subset<T, SalaireHeureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SalaireHeureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SalaireHeure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaireHeureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SalaireHeureAggregateArgs>(args: Subset<T, SalaireHeureAggregateArgs>): Prisma.PrismaPromise<GetSalaireHeureAggregateType<T>>

    /**
     * Group by SalaireHeure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaireHeureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SalaireHeureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SalaireHeureGroupByArgs['orderBy'] }
        : { orderBy?: SalaireHeureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SalaireHeureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalaireHeureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SalaireHeure model
   */
  readonly fields: SalaireHeureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SalaireHeure.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SalaireHeureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    titres<T extends SalaireHeure$titresArgs<ExtArgs> = {}>(args?: Subset<T, SalaireHeure$titresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TitrePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SalaireHeure model
   */ 
  interface SalaireHeureFieldRefs {
    readonly id: FieldRef<"SalaireHeure", 'Int'>
    readonly Montant: FieldRef<"SalaireHeure", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * SalaireHeure findUnique
   */
  export type SalaireHeureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaireHeure
     */
    select?: SalaireHeureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaireHeureInclude<ExtArgs> | null
    /**
     * Filter, which SalaireHeure to fetch.
     */
    where: SalaireHeureWhereUniqueInput
  }

  /**
   * SalaireHeure findUniqueOrThrow
   */
  export type SalaireHeureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaireHeure
     */
    select?: SalaireHeureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaireHeureInclude<ExtArgs> | null
    /**
     * Filter, which SalaireHeure to fetch.
     */
    where: SalaireHeureWhereUniqueInput
  }

  /**
   * SalaireHeure findFirst
   */
  export type SalaireHeureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaireHeure
     */
    select?: SalaireHeureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaireHeureInclude<ExtArgs> | null
    /**
     * Filter, which SalaireHeure to fetch.
     */
    where?: SalaireHeureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaireHeures to fetch.
     */
    orderBy?: SalaireHeureOrderByWithRelationInput | SalaireHeureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SalaireHeures.
     */
    cursor?: SalaireHeureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaireHeures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaireHeures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SalaireHeures.
     */
    distinct?: SalaireHeureScalarFieldEnum | SalaireHeureScalarFieldEnum[]
  }

  /**
   * SalaireHeure findFirstOrThrow
   */
  export type SalaireHeureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaireHeure
     */
    select?: SalaireHeureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaireHeureInclude<ExtArgs> | null
    /**
     * Filter, which SalaireHeure to fetch.
     */
    where?: SalaireHeureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaireHeures to fetch.
     */
    orderBy?: SalaireHeureOrderByWithRelationInput | SalaireHeureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SalaireHeures.
     */
    cursor?: SalaireHeureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaireHeures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaireHeures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SalaireHeures.
     */
    distinct?: SalaireHeureScalarFieldEnum | SalaireHeureScalarFieldEnum[]
  }

  /**
   * SalaireHeure findMany
   */
  export type SalaireHeureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaireHeure
     */
    select?: SalaireHeureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaireHeureInclude<ExtArgs> | null
    /**
     * Filter, which SalaireHeures to fetch.
     */
    where?: SalaireHeureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaireHeures to fetch.
     */
    orderBy?: SalaireHeureOrderByWithRelationInput | SalaireHeureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SalaireHeures.
     */
    cursor?: SalaireHeureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaireHeures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaireHeures.
     */
    skip?: number
    distinct?: SalaireHeureScalarFieldEnum | SalaireHeureScalarFieldEnum[]
  }

  /**
   * SalaireHeure create
   */
  export type SalaireHeureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaireHeure
     */
    select?: SalaireHeureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaireHeureInclude<ExtArgs> | null
    /**
     * The data needed to create a SalaireHeure.
     */
    data: XOR<SalaireHeureCreateInput, SalaireHeureUncheckedCreateInput>
  }

  /**
   * SalaireHeure createMany
   */
  export type SalaireHeureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SalaireHeures.
     */
    data: SalaireHeureCreateManyInput | SalaireHeureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SalaireHeure update
   */
  export type SalaireHeureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaireHeure
     */
    select?: SalaireHeureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaireHeureInclude<ExtArgs> | null
    /**
     * The data needed to update a SalaireHeure.
     */
    data: XOR<SalaireHeureUpdateInput, SalaireHeureUncheckedUpdateInput>
    /**
     * Choose, which SalaireHeure to update.
     */
    where: SalaireHeureWhereUniqueInput
  }

  /**
   * SalaireHeure updateMany
   */
  export type SalaireHeureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SalaireHeures.
     */
    data: XOR<SalaireHeureUpdateManyMutationInput, SalaireHeureUncheckedUpdateManyInput>
    /**
     * Filter which SalaireHeures to update
     */
    where?: SalaireHeureWhereInput
  }

  /**
   * SalaireHeure upsert
   */
  export type SalaireHeureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaireHeure
     */
    select?: SalaireHeureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaireHeureInclude<ExtArgs> | null
    /**
     * The filter to search for the SalaireHeure to update in case it exists.
     */
    where: SalaireHeureWhereUniqueInput
    /**
     * In case the SalaireHeure found by the `where` argument doesn't exist, create a new SalaireHeure with this data.
     */
    create: XOR<SalaireHeureCreateInput, SalaireHeureUncheckedCreateInput>
    /**
     * In case the SalaireHeure was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SalaireHeureUpdateInput, SalaireHeureUncheckedUpdateInput>
  }

  /**
   * SalaireHeure delete
   */
  export type SalaireHeureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaireHeure
     */
    select?: SalaireHeureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaireHeureInclude<ExtArgs> | null
    /**
     * Filter which SalaireHeure to delete.
     */
    where: SalaireHeureWhereUniqueInput
  }

  /**
   * SalaireHeure deleteMany
   */
  export type SalaireHeureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SalaireHeures to delete
     */
    where?: SalaireHeureWhereInput
  }

  /**
   * SalaireHeure.titres
   */
  export type SalaireHeure$titresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Titre
     */
    select?: TitreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitreInclude<ExtArgs> | null
    where?: TitreWhereInput
    orderBy?: TitreOrderByWithRelationInput | TitreOrderByWithRelationInput[]
    cursor?: TitreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TitreScalarFieldEnum | TitreScalarFieldEnum[]
  }

  /**
   * SalaireHeure without action
   */
  export type SalaireHeureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaireHeure
     */
    select?: SalaireHeureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaireHeureInclude<ExtArgs> | null
  }


  /**
   * Model Titre
   */

  export type AggregateTitre = {
    _count: TitreCountAggregateOutputType | null
    _avg: TitreAvgAggregateOutputType | null
    _sum: TitreSumAggregateOutputType | null
    _min: TitreMinAggregateOutputType | null
    _max: TitreMaxAggregateOutputType | null
  }

  export type TitreAvgAggregateOutputType = {
    id: number | null
    idSalaire: number | null
  }

  export type TitreSumAggregateOutputType = {
    id: number | null
    idSalaire: number | null
  }

  export type TitreMinAggregateOutputType = {
    id: number | null
    Intitule: string | null
    idSalaire: number | null
  }

  export type TitreMaxAggregateOutputType = {
    id: number | null
    Intitule: string | null
    idSalaire: number | null
  }

  export type TitreCountAggregateOutputType = {
    id: number
    Intitule: number
    idSalaire: number
    _all: number
  }


  export type TitreAvgAggregateInputType = {
    id?: true
    idSalaire?: true
  }

  export type TitreSumAggregateInputType = {
    id?: true
    idSalaire?: true
  }

  export type TitreMinAggregateInputType = {
    id?: true
    Intitule?: true
    idSalaire?: true
  }

  export type TitreMaxAggregateInputType = {
    id?: true
    Intitule?: true
    idSalaire?: true
  }

  export type TitreCountAggregateInputType = {
    id?: true
    Intitule?: true
    idSalaire?: true
    _all?: true
  }

  export type TitreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Titre to aggregate.
     */
    where?: TitreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Titres to fetch.
     */
    orderBy?: TitreOrderByWithRelationInput | TitreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TitreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Titres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Titres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Titres
    **/
    _count?: true | TitreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TitreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TitreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TitreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TitreMaxAggregateInputType
  }

  export type GetTitreAggregateType<T extends TitreAggregateArgs> = {
        [P in keyof T & keyof AggregateTitre]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTitre[P]>
      : GetScalarType<T[P], AggregateTitre[P]>
  }




  export type TitreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TitreWhereInput
    orderBy?: TitreOrderByWithAggregationInput | TitreOrderByWithAggregationInput[]
    by: TitreScalarFieldEnum[] | TitreScalarFieldEnum
    having?: TitreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TitreCountAggregateInputType | true
    _avg?: TitreAvgAggregateInputType
    _sum?: TitreSumAggregateInputType
    _min?: TitreMinAggregateInputType
    _max?: TitreMaxAggregateInputType
  }

  export type TitreGroupByOutputType = {
    id: number
    Intitule: string
    idSalaire: number
    _count: TitreCountAggregateOutputType | null
    _avg: TitreAvgAggregateOutputType | null
    _sum: TitreSumAggregateOutputType | null
    _min: TitreMinAggregateOutputType | null
    _max: TitreMaxAggregateOutputType | null
  }

  type GetTitreGroupByPayload<T extends TitreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TitreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TitreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TitreGroupByOutputType[P]>
            : GetScalarType<T[P], TitreGroupByOutputType[P]>
        }
      >
    >


  export type TitreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Intitule?: boolean
    idSalaire?: boolean
    salaire?: boolean | SalaireHeureDefaultArgs<ExtArgs>
    agents?: boolean | Titre$agentsArgs<ExtArgs>
    _count?: boolean | TitreCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["titre"]>


  export type TitreSelectScalar = {
    id?: boolean
    Intitule?: boolean
    idSalaire?: boolean
  }

  export type TitreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    salaire?: boolean | SalaireHeureDefaultArgs<ExtArgs>
    agents?: boolean | Titre$agentsArgs<ExtArgs>
    _count?: boolean | TitreCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TitrePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Titre"
    objects: {
      salaire: Prisma.$SalaireHeurePayload<ExtArgs>
      agents: Prisma.$AgentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Intitule: string
      idSalaire: number
    }, ExtArgs["result"]["titre"]>
    composites: {}
  }

  type TitreGetPayload<S extends boolean | null | undefined | TitreDefaultArgs> = $Result.GetResult<Prisma.$TitrePayload, S>

  type TitreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TitreFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TitreCountAggregateInputType | true
    }

  export interface TitreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Titre'], meta: { name: 'Titre' } }
    /**
     * Find zero or one Titre that matches the filter.
     * @param {TitreFindUniqueArgs} args - Arguments to find a Titre
     * @example
     * // Get one Titre
     * const titre = await prisma.titre.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TitreFindUniqueArgs>(args: SelectSubset<T, TitreFindUniqueArgs<ExtArgs>>): Prisma__TitreClient<$Result.GetResult<Prisma.$TitrePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Titre that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TitreFindUniqueOrThrowArgs} args - Arguments to find a Titre
     * @example
     * // Get one Titre
     * const titre = await prisma.titre.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TitreFindUniqueOrThrowArgs>(args: SelectSubset<T, TitreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TitreClient<$Result.GetResult<Prisma.$TitrePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Titre that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TitreFindFirstArgs} args - Arguments to find a Titre
     * @example
     * // Get one Titre
     * const titre = await prisma.titre.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TitreFindFirstArgs>(args?: SelectSubset<T, TitreFindFirstArgs<ExtArgs>>): Prisma__TitreClient<$Result.GetResult<Prisma.$TitrePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Titre that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TitreFindFirstOrThrowArgs} args - Arguments to find a Titre
     * @example
     * // Get one Titre
     * const titre = await prisma.titre.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TitreFindFirstOrThrowArgs>(args?: SelectSubset<T, TitreFindFirstOrThrowArgs<ExtArgs>>): Prisma__TitreClient<$Result.GetResult<Prisma.$TitrePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Titres that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TitreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Titres
     * const titres = await prisma.titre.findMany()
     * 
     * // Get first 10 Titres
     * const titres = await prisma.titre.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const titreWithIdOnly = await prisma.titre.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TitreFindManyArgs>(args?: SelectSubset<T, TitreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TitrePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Titre.
     * @param {TitreCreateArgs} args - Arguments to create a Titre.
     * @example
     * // Create one Titre
     * const Titre = await prisma.titre.create({
     *   data: {
     *     // ... data to create a Titre
     *   }
     * })
     * 
     */
    create<T extends TitreCreateArgs>(args: SelectSubset<T, TitreCreateArgs<ExtArgs>>): Prisma__TitreClient<$Result.GetResult<Prisma.$TitrePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Titres.
     * @param {TitreCreateManyArgs} args - Arguments to create many Titres.
     * @example
     * // Create many Titres
     * const titre = await prisma.titre.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TitreCreateManyArgs>(args?: SelectSubset<T, TitreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Titre.
     * @param {TitreDeleteArgs} args - Arguments to delete one Titre.
     * @example
     * // Delete one Titre
     * const Titre = await prisma.titre.delete({
     *   where: {
     *     // ... filter to delete one Titre
     *   }
     * })
     * 
     */
    delete<T extends TitreDeleteArgs>(args: SelectSubset<T, TitreDeleteArgs<ExtArgs>>): Prisma__TitreClient<$Result.GetResult<Prisma.$TitrePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Titre.
     * @param {TitreUpdateArgs} args - Arguments to update one Titre.
     * @example
     * // Update one Titre
     * const titre = await prisma.titre.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TitreUpdateArgs>(args: SelectSubset<T, TitreUpdateArgs<ExtArgs>>): Prisma__TitreClient<$Result.GetResult<Prisma.$TitrePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Titres.
     * @param {TitreDeleteManyArgs} args - Arguments to filter Titres to delete.
     * @example
     * // Delete a few Titres
     * const { count } = await prisma.titre.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TitreDeleteManyArgs>(args?: SelectSubset<T, TitreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Titres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TitreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Titres
     * const titre = await prisma.titre.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TitreUpdateManyArgs>(args: SelectSubset<T, TitreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Titre.
     * @param {TitreUpsertArgs} args - Arguments to update or create a Titre.
     * @example
     * // Update or create a Titre
     * const titre = await prisma.titre.upsert({
     *   create: {
     *     // ... data to create a Titre
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Titre we want to update
     *   }
     * })
     */
    upsert<T extends TitreUpsertArgs>(args: SelectSubset<T, TitreUpsertArgs<ExtArgs>>): Prisma__TitreClient<$Result.GetResult<Prisma.$TitrePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Titres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TitreCountArgs} args - Arguments to filter Titres to count.
     * @example
     * // Count the number of Titres
     * const count = await prisma.titre.count({
     *   where: {
     *     // ... the filter for the Titres we want to count
     *   }
     * })
    **/
    count<T extends TitreCountArgs>(
      args?: Subset<T, TitreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TitreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Titre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TitreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TitreAggregateArgs>(args: Subset<T, TitreAggregateArgs>): Prisma.PrismaPromise<GetTitreAggregateType<T>>

    /**
     * Group by Titre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TitreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TitreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TitreGroupByArgs['orderBy'] }
        : { orderBy?: TitreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TitreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTitreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Titre model
   */
  readonly fields: TitreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Titre.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TitreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    salaire<T extends SalaireHeureDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SalaireHeureDefaultArgs<ExtArgs>>): Prisma__SalaireHeureClient<$Result.GetResult<Prisma.$SalaireHeurePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    agents<T extends Titre$agentsArgs<ExtArgs> = {}>(args?: Subset<T, Titre$agentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Titre model
   */ 
  interface TitreFieldRefs {
    readonly id: FieldRef<"Titre", 'Int'>
    readonly Intitule: FieldRef<"Titre", 'String'>
    readonly idSalaire: FieldRef<"Titre", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Titre findUnique
   */
  export type TitreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Titre
     */
    select?: TitreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitreInclude<ExtArgs> | null
    /**
     * Filter, which Titre to fetch.
     */
    where: TitreWhereUniqueInput
  }

  /**
   * Titre findUniqueOrThrow
   */
  export type TitreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Titre
     */
    select?: TitreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitreInclude<ExtArgs> | null
    /**
     * Filter, which Titre to fetch.
     */
    where: TitreWhereUniqueInput
  }

  /**
   * Titre findFirst
   */
  export type TitreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Titre
     */
    select?: TitreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitreInclude<ExtArgs> | null
    /**
     * Filter, which Titre to fetch.
     */
    where?: TitreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Titres to fetch.
     */
    orderBy?: TitreOrderByWithRelationInput | TitreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Titres.
     */
    cursor?: TitreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Titres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Titres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Titres.
     */
    distinct?: TitreScalarFieldEnum | TitreScalarFieldEnum[]
  }

  /**
   * Titre findFirstOrThrow
   */
  export type TitreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Titre
     */
    select?: TitreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitreInclude<ExtArgs> | null
    /**
     * Filter, which Titre to fetch.
     */
    where?: TitreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Titres to fetch.
     */
    orderBy?: TitreOrderByWithRelationInput | TitreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Titres.
     */
    cursor?: TitreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Titres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Titres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Titres.
     */
    distinct?: TitreScalarFieldEnum | TitreScalarFieldEnum[]
  }

  /**
   * Titre findMany
   */
  export type TitreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Titre
     */
    select?: TitreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitreInclude<ExtArgs> | null
    /**
     * Filter, which Titres to fetch.
     */
    where?: TitreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Titres to fetch.
     */
    orderBy?: TitreOrderByWithRelationInput | TitreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Titres.
     */
    cursor?: TitreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Titres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Titres.
     */
    skip?: number
    distinct?: TitreScalarFieldEnum | TitreScalarFieldEnum[]
  }

  /**
   * Titre create
   */
  export type TitreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Titre
     */
    select?: TitreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitreInclude<ExtArgs> | null
    /**
     * The data needed to create a Titre.
     */
    data: XOR<TitreCreateInput, TitreUncheckedCreateInput>
  }

  /**
   * Titre createMany
   */
  export type TitreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Titres.
     */
    data: TitreCreateManyInput | TitreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Titre update
   */
  export type TitreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Titre
     */
    select?: TitreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitreInclude<ExtArgs> | null
    /**
     * The data needed to update a Titre.
     */
    data: XOR<TitreUpdateInput, TitreUncheckedUpdateInput>
    /**
     * Choose, which Titre to update.
     */
    where: TitreWhereUniqueInput
  }

  /**
   * Titre updateMany
   */
  export type TitreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Titres.
     */
    data: XOR<TitreUpdateManyMutationInput, TitreUncheckedUpdateManyInput>
    /**
     * Filter which Titres to update
     */
    where?: TitreWhereInput
  }

  /**
   * Titre upsert
   */
  export type TitreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Titre
     */
    select?: TitreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitreInclude<ExtArgs> | null
    /**
     * The filter to search for the Titre to update in case it exists.
     */
    where: TitreWhereUniqueInput
    /**
     * In case the Titre found by the `where` argument doesn't exist, create a new Titre with this data.
     */
    create: XOR<TitreCreateInput, TitreUncheckedCreateInput>
    /**
     * In case the Titre was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TitreUpdateInput, TitreUncheckedUpdateInput>
  }

  /**
   * Titre delete
   */
  export type TitreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Titre
     */
    select?: TitreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitreInclude<ExtArgs> | null
    /**
     * Filter which Titre to delete.
     */
    where: TitreWhereUniqueInput
  }

  /**
   * Titre deleteMany
   */
  export type TitreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Titres to delete
     */
    where?: TitreWhereInput
  }

  /**
   * Titre.agents
   */
  export type Titre$agentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    where?: AgentWhereInput
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    cursor?: AgentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgentScalarFieldEnum | AgentScalarFieldEnum[]
  }

  /**
   * Titre without action
   */
  export type TitreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Titre
     */
    select?: TitreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitreInclude<ExtArgs> | null
  }


  /**
   * Model Agent
   */

  export type AggregateAgent = {
    _count: AgentCountAggregateOutputType | null
    _avg: AgentAvgAggregateOutputType | null
    _sum: AgentSumAggregateOutputType | null
    _min: AgentMinAggregateOutputType | null
    _max: AgentMaxAggregateOutputType | null
  }

  export type AgentAvgAggregateOutputType = {
    id: number | null
    idDepartement: number | null
    idTitre: number | null
  }

  export type AgentSumAggregateOutputType = {
    id: number | null
    idDepartement: number | null
    idTitre: number | null
  }

  export type AgentMinAggregateOutputType = {
    id: number | null
    Nom: string | null
    PostNom: string | null
    Prenom: string | null
    Matricule: string | null
    Mdp: string | null
    Telehone: string | null
    Status: boolean | null
    idDepartement: number | null
    idTitre: number | null
  }

  export type AgentMaxAggregateOutputType = {
    id: number | null
    Nom: string | null
    PostNom: string | null
    Prenom: string | null
    Matricule: string | null
    Mdp: string | null
    Telehone: string | null
    Status: boolean | null
    idDepartement: number | null
    idTitre: number | null
  }

  export type AgentCountAggregateOutputType = {
    id: number
    Nom: number
    PostNom: number
    Prenom: number
    Matricule: number
    Mdp: number
    Telehone: number
    Status: number
    idDepartement: number
    idTitre: number
    _all: number
  }


  export type AgentAvgAggregateInputType = {
    id?: true
    idDepartement?: true
    idTitre?: true
  }

  export type AgentSumAggregateInputType = {
    id?: true
    idDepartement?: true
    idTitre?: true
  }

  export type AgentMinAggregateInputType = {
    id?: true
    Nom?: true
    PostNom?: true
    Prenom?: true
    Matricule?: true
    Mdp?: true
    Telehone?: true
    Status?: true
    idDepartement?: true
    idTitre?: true
  }

  export type AgentMaxAggregateInputType = {
    id?: true
    Nom?: true
    PostNom?: true
    Prenom?: true
    Matricule?: true
    Mdp?: true
    Telehone?: true
    Status?: true
    idDepartement?: true
    idTitre?: true
  }

  export type AgentCountAggregateInputType = {
    id?: true
    Nom?: true
    PostNom?: true
    Prenom?: true
    Matricule?: true
    Mdp?: true
    Telehone?: true
    Status?: true
    idDepartement?: true
    idTitre?: true
    _all?: true
  }

  export type AgentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agent to aggregate.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Agents
    **/
    _count?: true | AgentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgentMaxAggregateInputType
  }

  export type GetAgentAggregateType<T extends AgentAggregateArgs> = {
        [P in keyof T & keyof AggregateAgent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgent[P]>
      : GetScalarType<T[P], AggregateAgent[P]>
  }




  export type AgentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentWhereInput
    orderBy?: AgentOrderByWithAggregationInput | AgentOrderByWithAggregationInput[]
    by: AgentScalarFieldEnum[] | AgentScalarFieldEnum
    having?: AgentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgentCountAggregateInputType | true
    _avg?: AgentAvgAggregateInputType
    _sum?: AgentSumAggregateInputType
    _min?: AgentMinAggregateInputType
    _max?: AgentMaxAggregateInputType
  }

  export type AgentGroupByOutputType = {
    id: number
    Nom: string
    PostNom: string
    Prenom: string
    Matricule: string
    Mdp: string
    Telehone: string
    Status: boolean
    idDepartement: number
    idTitre: number
    _count: AgentCountAggregateOutputType | null
    _avg: AgentAvgAggregateOutputType | null
    _sum: AgentSumAggregateOutputType | null
    _min: AgentMinAggregateOutputType | null
    _max: AgentMaxAggregateOutputType | null
  }

  type GetAgentGroupByPayload<T extends AgentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgentGroupByOutputType[P]>
            : GetScalarType<T[P], AgentGroupByOutputType[P]>
        }
      >
    >


  export type AgentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nom?: boolean
    PostNom?: boolean
    Prenom?: boolean
    Matricule?: boolean
    Mdp?: boolean
    Telehone?: boolean
    Status?: boolean
    idDepartement?: boolean
    idTitre?: boolean
    departement?: boolean | DepartementDefaultArgs<ExtArgs>
    titre?: boolean | TitreDefaultArgs<ExtArgs>
    presences?: boolean | Agent$presencesArgs<ExtArgs>
    agentMatin?: boolean | Agent$agentMatinArgs<ExtArgs>
    agentSoiree?: boolean | Agent$agentSoireeArgs<ExtArgs>
    _count?: boolean | AgentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agent"]>


  export type AgentSelectScalar = {
    id?: boolean
    Nom?: boolean
    PostNom?: boolean
    Prenom?: boolean
    Matricule?: boolean
    Mdp?: boolean
    Telehone?: boolean
    Status?: boolean
    idDepartement?: boolean
    idTitre?: boolean
  }

  export type AgentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departement?: boolean | DepartementDefaultArgs<ExtArgs>
    titre?: boolean | TitreDefaultArgs<ExtArgs>
    presences?: boolean | Agent$presencesArgs<ExtArgs>
    agentMatin?: boolean | Agent$agentMatinArgs<ExtArgs>
    agentSoiree?: boolean | Agent$agentSoireeArgs<ExtArgs>
    _count?: boolean | AgentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AgentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Agent"
    objects: {
      departement: Prisma.$DepartementPayload<ExtArgs>
      titre: Prisma.$TitrePayload<ExtArgs>
      presences: Prisma.$PresencePayload<ExtArgs>[]
      agentMatin: Prisma.$AgentMatinPayload<ExtArgs>[]
      agentSoiree: Prisma.$AgentSoireePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Nom: string
      PostNom: string
      Prenom: string
      Matricule: string
      Mdp: string
      Telehone: string
      Status: boolean
      idDepartement: number
      idTitre: number
    }, ExtArgs["result"]["agent"]>
    composites: {}
  }

  type AgentGetPayload<S extends boolean | null | undefined | AgentDefaultArgs> = $Result.GetResult<Prisma.$AgentPayload, S>

  type AgentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AgentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AgentCountAggregateInputType | true
    }

  export interface AgentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Agent'], meta: { name: 'Agent' } }
    /**
     * Find zero or one Agent that matches the filter.
     * @param {AgentFindUniqueArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgentFindUniqueArgs>(args: SelectSubset<T, AgentFindUniqueArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Agent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AgentFindUniqueOrThrowArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgentFindUniqueOrThrowArgs>(args: SelectSubset<T, AgentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Agent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentFindFirstArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgentFindFirstArgs>(args?: SelectSubset<T, AgentFindFirstArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Agent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentFindFirstOrThrowArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgentFindFirstOrThrowArgs>(args?: SelectSubset<T, AgentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Agents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agents
     * const agents = await prisma.agent.findMany()
     * 
     * // Get first 10 Agents
     * const agents = await prisma.agent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agentWithIdOnly = await prisma.agent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgentFindManyArgs>(args?: SelectSubset<T, AgentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Agent.
     * @param {AgentCreateArgs} args - Arguments to create a Agent.
     * @example
     * // Create one Agent
     * const Agent = await prisma.agent.create({
     *   data: {
     *     // ... data to create a Agent
     *   }
     * })
     * 
     */
    create<T extends AgentCreateArgs>(args: SelectSubset<T, AgentCreateArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Agents.
     * @param {AgentCreateManyArgs} args - Arguments to create many Agents.
     * @example
     * // Create many Agents
     * const agent = await prisma.agent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgentCreateManyArgs>(args?: SelectSubset<T, AgentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Agent.
     * @param {AgentDeleteArgs} args - Arguments to delete one Agent.
     * @example
     * // Delete one Agent
     * const Agent = await prisma.agent.delete({
     *   where: {
     *     // ... filter to delete one Agent
     *   }
     * })
     * 
     */
    delete<T extends AgentDeleteArgs>(args: SelectSubset<T, AgentDeleteArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Agent.
     * @param {AgentUpdateArgs} args - Arguments to update one Agent.
     * @example
     * // Update one Agent
     * const agent = await prisma.agent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgentUpdateArgs>(args: SelectSubset<T, AgentUpdateArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Agents.
     * @param {AgentDeleteManyArgs} args - Arguments to filter Agents to delete.
     * @example
     * // Delete a few Agents
     * const { count } = await prisma.agent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgentDeleteManyArgs>(args?: SelectSubset<T, AgentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agents
     * const agent = await prisma.agent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgentUpdateManyArgs>(args: SelectSubset<T, AgentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Agent.
     * @param {AgentUpsertArgs} args - Arguments to update or create a Agent.
     * @example
     * // Update or create a Agent
     * const agent = await prisma.agent.upsert({
     *   create: {
     *     // ... data to create a Agent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agent we want to update
     *   }
     * })
     */
    upsert<T extends AgentUpsertArgs>(args: SelectSubset<T, AgentUpsertArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Agents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentCountArgs} args - Arguments to filter Agents to count.
     * @example
     * // Count the number of Agents
     * const count = await prisma.agent.count({
     *   where: {
     *     // ... the filter for the Agents we want to count
     *   }
     * })
    **/
    count<T extends AgentCountArgs>(
      args?: Subset<T, AgentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Agent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgentAggregateArgs>(args: Subset<T, AgentAggregateArgs>): Prisma.PrismaPromise<GetAgentAggregateType<T>>

    /**
     * Group by Agent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgentGroupByArgs['orderBy'] }
        : { orderBy?: AgentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Agent model
   */
  readonly fields: AgentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Agent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    departement<T extends DepartementDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartementDefaultArgs<ExtArgs>>): Prisma__DepartementClient<$Result.GetResult<Prisma.$DepartementPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    titre<T extends TitreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TitreDefaultArgs<ExtArgs>>): Prisma__TitreClient<$Result.GetResult<Prisma.$TitrePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    presences<T extends Agent$presencesArgs<ExtArgs> = {}>(args?: Subset<T, Agent$presencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findMany"> | Null>
    agentMatin<T extends Agent$agentMatinArgs<ExtArgs> = {}>(args?: Subset<T, Agent$agentMatinArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentMatinPayload<ExtArgs>, T, "findMany"> | Null>
    agentSoiree<T extends Agent$agentSoireeArgs<ExtArgs> = {}>(args?: Subset<T, Agent$agentSoireeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentSoireePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Agent model
   */ 
  interface AgentFieldRefs {
    readonly id: FieldRef<"Agent", 'Int'>
    readonly Nom: FieldRef<"Agent", 'String'>
    readonly PostNom: FieldRef<"Agent", 'String'>
    readonly Prenom: FieldRef<"Agent", 'String'>
    readonly Matricule: FieldRef<"Agent", 'String'>
    readonly Mdp: FieldRef<"Agent", 'String'>
    readonly Telehone: FieldRef<"Agent", 'String'>
    readonly Status: FieldRef<"Agent", 'Boolean'>
    readonly idDepartement: FieldRef<"Agent", 'Int'>
    readonly idTitre: FieldRef<"Agent", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Agent findUnique
   */
  export type AgentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where: AgentWhereUniqueInput
  }

  /**
   * Agent findUniqueOrThrow
   */
  export type AgentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where: AgentWhereUniqueInput
  }

  /**
   * Agent findFirst
   */
  export type AgentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agents.
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agents.
     */
    distinct?: AgentScalarFieldEnum | AgentScalarFieldEnum[]
  }

  /**
   * Agent findFirstOrThrow
   */
  export type AgentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agents.
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agents.
     */
    distinct?: AgentScalarFieldEnum | AgentScalarFieldEnum[]
  }

  /**
   * Agent findMany
   */
  export type AgentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agents to fetch.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Agents.
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    distinct?: AgentScalarFieldEnum | AgentScalarFieldEnum[]
  }

  /**
   * Agent create
   */
  export type AgentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * The data needed to create a Agent.
     */
    data: XOR<AgentCreateInput, AgentUncheckedCreateInput>
  }

  /**
   * Agent createMany
   */
  export type AgentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Agents.
     */
    data: AgentCreateManyInput | AgentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Agent update
   */
  export type AgentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * The data needed to update a Agent.
     */
    data: XOR<AgentUpdateInput, AgentUncheckedUpdateInput>
    /**
     * Choose, which Agent to update.
     */
    where: AgentWhereUniqueInput
  }

  /**
   * Agent updateMany
   */
  export type AgentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Agents.
     */
    data: XOR<AgentUpdateManyMutationInput, AgentUncheckedUpdateManyInput>
    /**
     * Filter which Agents to update
     */
    where?: AgentWhereInput
  }

  /**
   * Agent upsert
   */
  export type AgentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * The filter to search for the Agent to update in case it exists.
     */
    where: AgentWhereUniqueInput
    /**
     * In case the Agent found by the `where` argument doesn't exist, create a new Agent with this data.
     */
    create: XOR<AgentCreateInput, AgentUncheckedCreateInput>
    /**
     * In case the Agent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgentUpdateInput, AgentUncheckedUpdateInput>
  }

  /**
   * Agent delete
   */
  export type AgentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter which Agent to delete.
     */
    where: AgentWhereUniqueInput
  }

  /**
   * Agent deleteMany
   */
  export type AgentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agents to delete
     */
    where?: AgentWhereInput
  }

  /**
   * Agent.presences
   */
  export type Agent$presencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    where?: PresenceWhereInput
    orderBy?: PresenceOrderByWithRelationInput | PresenceOrderByWithRelationInput[]
    cursor?: PresenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PresenceScalarFieldEnum | PresenceScalarFieldEnum[]
  }

  /**
   * Agent.agentMatin
   */
  export type Agent$agentMatinArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentMatin
     */
    select?: AgentMatinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentMatinInclude<ExtArgs> | null
    where?: AgentMatinWhereInput
    orderBy?: AgentMatinOrderByWithRelationInput | AgentMatinOrderByWithRelationInput[]
    cursor?: AgentMatinWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgentMatinScalarFieldEnum | AgentMatinScalarFieldEnum[]
  }

  /**
   * Agent.agentSoiree
   */
  export type Agent$agentSoireeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSoiree
     */
    select?: AgentSoireeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSoireeInclude<ExtArgs> | null
    where?: AgentSoireeWhereInput
    orderBy?: AgentSoireeOrderByWithRelationInput | AgentSoireeOrderByWithRelationInput[]
    cursor?: AgentSoireeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgentSoireeScalarFieldEnum | AgentSoireeScalarFieldEnum[]
  }

  /**
   * Agent without action
   */
  export type AgentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
  }


  /**
   * Model Presence
   */

  export type AggregatePresence = {
    _count: PresenceCountAggregateOutputType | null
    _avg: PresenceAvgAggregateOutputType | null
    _sum: PresenceSumAggregateOutputType | null
    _min: PresenceMinAggregateOutputType | null
    _max: PresenceMaxAggregateOutputType | null
  }

  export type PresenceAvgAggregateOutputType = {
    id: number | null
    idAgent: number | null
  }

  export type PresenceSumAggregateOutputType = {
    id: number | null
    idAgent: number | null
  }

  export type PresenceMinAggregateOutputType = {
    id: number | null
    idAgent: number | null
    Date: Date | null
    HeureArrivee: Date | null
    HeureSortie: Date | null
  }

  export type PresenceMaxAggregateOutputType = {
    id: number | null
    idAgent: number | null
    Date: Date | null
    HeureArrivee: Date | null
    HeureSortie: Date | null
  }

  export type PresenceCountAggregateOutputType = {
    id: number
    idAgent: number
    Date: number
    HeureArrivee: number
    HeureSortie: number
    _all: number
  }


  export type PresenceAvgAggregateInputType = {
    id?: true
    idAgent?: true
  }

  export type PresenceSumAggregateInputType = {
    id?: true
    idAgent?: true
  }

  export type PresenceMinAggregateInputType = {
    id?: true
    idAgent?: true
    Date?: true
    HeureArrivee?: true
    HeureSortie?: true
  }

  export type PresenceMaxAggregateInputType = {
    id?: true
    idAgent?: true
    Date?: true
    HeureArrivee?: true
    HeureSortie?: true
  }

  export type PresenceCountAggregateInputType = {
    id?: true
    idAgent?: true
    Date?: true
    HeureArrivee?: true
    HeureSortie?: true
    _all?: true
  }

  export type PresenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Presence to aggregate.
     */
    where?: PresenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presences to fetch.
     */
    orderBy?: PresenceOrderByWithRelationInput | PresenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PresenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Presences
    **/
    _count?: true | PresenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PresenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PresenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PresenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PresenceMaxAggregateInputType
  }

  export type GetPresenceAggregateType<T extends PresenceAggregateArgs> = {
        [P in keyof T & keyof AggregatePresence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePresence[P]>
      : GetScalarType<T[P], AggregatePresence[P]>
  }




  export type PresenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresenceWhereInput
    orderBy?: PresenceOrderByWithAggregationInput | PresenceOrderByWithAggregationInput[]
    by: PresenceScalarFieldEnum[] | PresenceScalarFieldEnum
    having?: PresenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PresenceCountAggregateInputType | true
    _avg?: PresenceAvgAggregateInputType
    _sum?: PresenceSumAggregateInputType
    _min?: PresenceMinAggregateInputType
    _max?: PresenceMaxAggregateInputType
  }

  export type PresenceGroupByOutputType = {
    id: number
    idAgent: number
    Date: Date
    HeureArrivee: Date
    HeureSortie: Date
    _count: PresenceCountAggregateOutputType | null
    _avg: PresenceAvgAggregateOutputType | null
    _sum: PresenceSumAggregateOutputType | null
    _min: PresenceMinAggregateOutputType | null
    _max: PresenceMaxAggregateOutputType | null
  }

  type GetPresenceGroupByPayload<T extends PresenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PresenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PresenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PresenceGroupByOutputType[P]>
            : GetScalarType<T[P], PresenceGroupByOutputType[P]>
        }
      >
    >


  export type PresenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idAgent?: boolean
    Date?: boolean
    HeureArrivee?: boolean
    HeureSortie?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["presence"]>


  export type PresenceSelectScalar = {
    id?: boolean
    idAgent?: boolean
    Date?: boolean
    HeureArrivee?: boolean
    HeureSortie?: boolean
  }

  export type PresenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }

  export type $PresencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Presence"
    objects: {
      agent: Prisma.$AgentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      idAgent: number
      Date: Date
      HeureArrivee: Date
      HeureSortie: Date
    }, ExtArgs["result"]["presence"]>
    composites: {}
  }

  type PresenceGetPayload<S extends boolean | null | undefined | PresenceDefaultArgs> = $Result.GetResult<Prisma.$PresencePayload, S>

  type PresenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PresenceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PresenceCountAggregateInputType | true
    }

  export interface PresenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Presence'], meta: { name: 'Presence' } }
    /**
     * Find zero or one Presence that matches the filter.
     * @param {PresenceFindUniqueArgs} args - Arguments to find a Presence
     * @example
     * // Get one Presence
     * const presence = await prisma.presence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PresenceFindUniqueArgs>(args: SelectSubset<T, PresenceFindUniqueArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Presence that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PresenceFindUniqueOrThrowArgs} args - Arguments to find a Presence
     * @example
     * // Get one Presence
     * const presence = await prisma.presence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PresenceFindUniqueOrThrowArgs>(args: SelectSubset<T, PresenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Presence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresenceFindFirstArgs} args - Arguments to find a Presence
     * @example
     * // Get one Presence
     * const presence = await prisma.presence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PresenceFindFirstArgs>(args?: SelectSubset<T, PresenceFindFirstArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Presence that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresenceFindFirstOrThrowArgs} args - Arguments to find a Presence
     * @example
     * // Get one Presence
     * const presence = await prisma.presence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PresenceFindFirstOrThrowArgs>(args?: SelectSubset<T, PresenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Presences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Presences
     * const presences = await prisma.presence.findMany()
     * 
     * // Get first 10 Presences
     * const presences = await prisma.presence.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const presenceWithIdOnly = await prisma.presence.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PresenceFindManyArgs>(args?: SelectSubset<T, PresenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Presence.
     * @param {PresenceCreateArgs} args - Arguments to create a Presence.
     * @example
     * // Create one Presence
     * const Presence = await prisma.presence.create({
     *   data: {
     *     // ... data to create a Presence
     *   }
     * })
     * 
     */
    create<T extends PresenceCreateArgs>(args: SelectSubset<T, PresenceCreateArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Presences.
     * @param {PresenceCreateManyArgs} args - Arguments to create many Presences.
     * @example
     * // Create many Presences
     * const presence = await prisma.presence.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PresenceCreateManyArgs>(args?: SelectSubset<T, PresenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Presence.
     * @param {PresenceDeleteArgs} args - Arguments to delete one Presence.
     * @example
     * // Delete one Presence
     * const Presence = await prisma.presence.delete({
     *   where: {
     *     // ... filter to delete one Presence
     *   }
     * })
     * 
     */
    delete<T extends PresenceDeleteArgs>(args: SelectSubset<T, PresenceDeleteArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Presence.
     * @param {PresenceUpdateArgs} args - Arguments to update one Presence.
     * @example
     * // Update one Presence
     * const presence = await prisma.presence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PresenceUpdateArgs>(args: SelectSubset<T, PresenceUpdateArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Presences.
     * @param {PresenceDeleteManyArgs} args - Arguments to filter Presences to delete.
     * @example
     * // Delete a few Presences
     * const { count } = await prisma.presence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PresenceDeleteManyArgs>(args?: SelectSubset<T, PresenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Presences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Presences
     * const presence = await prisma.presence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PresenceUpdateManyArgs>(args: SelectSubset<T, PresenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Presence.
     * @param {PresenceUpsertArgs} args - Arguments to update or create a Presence.
     * @example
     * // Update or create a Presence
     * const presence = await prisma.presence.upsert({
     *   create: {
     *     // ... data to create a Presence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Presence we want to update
     *   }
     * })
     */
    upsert<T extends PresenceUpsertArgs>(args: SelectSubset<T, PresenceUpsertArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Presences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresenceCountArgs} args - Arguments to filter Presences to count.
     * @example
     * // Count the number of Presences
     * const count = await prisma.presence.count({
     *   where: {
     *     // ... the filter for the Presences we want to count
     *   }
     * })
    **/
    count<T extends PresenceCountArgs>(
      args?: Subset<T, PresenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PresenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Presence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PresenceAggregateArgs>(args: Subset<T, PresenceAggregateArgs>): Prisma.PrismaPromise<GetPresenceAggregateType<T>>

    /**
     * Group by Presence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PresenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PresenceGroupByArgs['orderBy'] }
        : { orderBy?: PresenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PresenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPresenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Presence model
   */
  readonly fields: PresenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Presence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PresenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agent<T extends AgentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgentDefaultArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Presence model
   */ 
  interface PresenceFieldRefs {
    readonly id: FieldRef<"Presence", 'Int'>
    readonly idAgent: FieldRef<"Presence", 'Int'>
    readonly Date: FieldRef<"Presence", 'DateTime'>
    readonly HeureArrivee: FieldRef<"Presence", 'DateTime'>
    readonly HeureSortie: FieldRef<"Presence", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Presence findUnique
   */
  export type PresenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * Filter, which Presence to fetch.
     */
    where: PresenceWhereUniqueInput
  }

  /**
   * Presence findUniqueOrThrow
   */
  export type PresenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * Filter, which Presence to fetch.
     */
    where: PresenceWhereUniqueInput
  }

  /**
   * Presence findFirst
   */
  export type PresenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * Filter, which Presence to fetch.
     */
    where?: PresenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presences to fetch.
     */
    orderBy?: PresenceOrderByWithRelationInput | PresenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Presences.
     */
    cursor?: PresenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Presences.
     */
    distinct?: PresenceScalarFieldEnum | PresenceScalarFieldEnum[]
  }

  /**
   * Presence findFirstOrThrow
   */
  export type PresenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * Filter, which Presence to fetch.
     */
    where?: PresenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presences to fetch.
     */
    orderBy?: PresenceOrderByWithRelationInput | PresenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Presences.
     */
    cursor?: PresenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Presences.
     */
    distinct?: PresenceScalarFieldEnum | PresenceScalarFieldEnum[]
  }

  /**
   * Presence findMany
   */
  export type PresenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * Filter, which Presences to fetch.
     */
    where?: PresenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presences to fetch.
     */
    orderBy?: PresenceOrderByWithRelationInput | PresenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Presences.
     */
    cursor?: PresenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presences.
     */
    skip?: number
    distinct?: PresenceScalarFieldEnum | PresenceScalarFieldEnum[]
  }

  /**
   * Presence create
   */
  export type PresenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * The data needed to create a Presence.
     */
    data: XOR<PresenceCreateInput, PresenceUncheckedCreateInput>
  }

  /**
   * Presence createMany
   */
  export type PresenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Presences.
     */
    data: PresenceCreateManyInput | PresenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Presence update
   */
  export type PresenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * The data needed to update a Presence.
     */
    data: XOR<PresenceUpdateInput, PresenceUncheckedUpdateInput>
    /**
     * Choose, which Presence to update.
     */
    where: PresenceWhereUniqueInput
  }

  /**
   * Presence updateMany
   */
  export type PresenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Presences.
     */
    data: XOR<PresenceUpdateManyMutationInput, PresenceUncheckedUpdateManyInput>
    /**
     * Filter which Presences to update
     */
    where?: PresenceWhereInput
  }

  /**
   * Presence upsert
   */
  export type PresenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * The filter to search for the Presence to update in case it exists.
     */
    where: PresenceWhereUniqueInput
    /**
     * In case the Presence found by the `where` argument doesn't exist, create a new Presence with this data.
     */
    create: XOR<PresenceCreateInput, PresenceUncheckedCreateInput>
    /**
     * In case the Presence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PresenceUpdateInput, PresenceUncheckedUpdateInput>
  }

  /**
   * Presence delete
   */
  export type PresenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * Filter which Presence to delete.
     */
    where: PresenceWhereUniqueInput
  }

  /**
   * Presence deleteMany
   */
  export type PresenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Presences to delete
     */
    where?: PresenceWhereInput
  }

  /**
   * Presence without action
   */
  export type PresenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
  }


  /**
   * Model AgentMatin
   */

  export type AggregateAgentMatin = {
    _count: AgentMatinCountAggregateOutputType | null
    _avg: AgentMatinAvgAggregateOutputType | null
    _sum: AgentMatinSumAggregateOutputType | null
    _min: AgentMatinMinAggregateOutputType | null
    _max: AgentMatinMaxAggregateOutputType | null
  }

  export type AgentMatinAvgAggregateOutputType = {
    id: number | null
    idAgent: number | null
  }

  export type AgentMatinSumAggregateOutputType = {
    id: number | null
    idAgent: number | null
  }

  export type AgentMatinMinAggregateOutputType = {
    id: number | null
    idAgent: number | null
  }

  export type AgentMatinMaxAggregateOutputType = {
    id: number | null
    idAgent: number | null
  }

  export type AgentMatinCountAggregateOutputType = {
    id: number
    idAgent: number
    _all: number
  }


  export type AgentMatinAvgAggregateInputType = {
    id?: true
    idAgent?: true
  }

  export type AgentMatinSumAggregateInputType = {
    id?: true
    idAgent?: true
  }

  export type AgentMatinMinAggregateInputType = {
    id?: true
    idAgent?: true
  }

  export type AgentMatinMaxAggregateInputType = {
    id?: true
    idAgent?: true
  }

  export type AgentMatinCountAggregateInputType = {
    id?: true
    idAgent?: true
    _all?: true
  }

  export type AgentMatinAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgentMatin to aggregate.
     */
    where?: AgentMatinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentMatins to fetch.
     */
    orderBy?: AgentMatinOrderByWithRelationInput | AgentMatinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgentMatinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentMatins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentMatins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AgentMatins
    **/
    _count?: true | AgentMatinCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgentMatinAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgentMatinSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgentMatinMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgentMatinMaxAggregateInputType
  }

  export type GetAgentMatinAggregateType<T extends AgentMatinAggregateArgs> = {
        [P in keyof T & keyof AggregateAgentMatin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgentMatin[P]>
      : GetScalarType<T[P], AggregateAgentMatin[P]>
  }




  export type AgentMatinGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentMatinWhereInput
    orderBy?: AgentMatinOrderByWithAggregationInput | AgentMatinOrderByWithAggregationInput[]
    by: AgentMatinScalarFieldEnum[] | AgentMatinScalarFieldEnum
    having?: AgentMatinScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgentMatinCountAggregateInputType | true
    _avg?: AgentMatinAvgAggregateInputType
    _sum?: AgentMatinSumAggregateInputType
    _min?: AgentMatinMinAggregateInputType
    _max?: AgentMatinMaxAggregateInputType
  }

  export type AgentMatinGroupByOutputType = {
    id: number
    idAgent: number
    _count: AgentMatinCountAggregateOutputType | null
    _avg: AgentMatinAvgAggregateOutputType | null
    _sum: AgentMatinSumAggregateOutputType | null
    _min: AgentMatinMinAggregateOutputType | null
    _max: AgentMatinMaxAggregateOutputType | null
  }

  type GetAgentMatinGroupByPayload<T extends AgentMatinGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgentMatinGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgentMatinGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgentMatinGroupByOutputType[P]>
            : GetScalarType<T[P], AgentMatinGroupByOutputType[P]>
        }
      >
    >


  export type AgentMatinSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idAgent?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agentMatin"]>


  export type AgentMatinSelectScalar = {
    id?: boolean
    idAgent?: boolean
  }

  export type AgentMatinInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }

  export type $AgentMatinPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AgentMatin"
    objects: {
      agent: Prisma.$AgentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      idAgent: number
    }, ExtArgs["result"]["agentMatin"]>
    composites: {}
  }

  type AgentMatinGetPayload<S extends boolean | null | undefined | AgentMatinDefaultArgs> = $Result.GetResult<Prisma.$AgentMatinPayload, S>

  type AgentMatinCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AgentMatinFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AgentMatinCountAggregateInputType | true
    }

  export interface AgentMatinDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AgentMatin'], meta: { name: 'AgentMatin' } }
    /**
     * Find zero or one AgentMatin that matches the filter.
     * @param {AgentMatinFindUniqueArgs} args - Arguments to find a AgentMatin
     * @example
     * // Get one AgentMatin
     * const agentMatin = await prisma.agentMatin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgentMatinFindUniqueArgs>(args: SelectSubset<T, AgentMatinFindUniqueArgs<ExtArgs>>): Prisma__AgentMatinClient<$Result.GetResult<Prisma.$AgentMatinPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AgentMatin that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AgentMatinFindUniqueOrThrowArgs} args - Arguments to find a AgentMatin
     * @example
     * // Get one AgentMatin
     * const agentMatin = await prisma.agentMatin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgentMatinFindUniqueOrThrowArgs>(args: SelectSubset<T, AgentMatinFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgentMatinClient<$Result.GetResult<Prisma.$AgentMatinPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AgentMatin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentMatinFindFirstArgs} args - Arguments to find a AgentMatin
     * @example
     * // Get one AgentMatin
     * const agentMatin = await prisma.agentMatin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgentMatinFindFirstArgs>(args?: SelectSubset<T, AgentMatinFindFirstArgs<ExtArgs>>): Prisma__AgentMatinClient<$Result.GetResult<Prisma.$AgentMatinPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AgentMatin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentMatinFindFirstOrThrowArgs} args - Arguments to find a AgentMatin
     * @example
     * // Get one AgentMatin
     * const agentMatin = await prisma.agentMatin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgentMatinFindFirstOrThrowArgs>(args?: SelectSubset<T, AgentMatinFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgentMatinClient<$Result.GetResult<Prisma.$AgentMatinPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AgentMatins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentMatinFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AgentMatins
     * const agentMatins = await prisma.agentMatin.findMany()
     * 
     * // Get first 10 AgentMatins
     * const agentMatins = await prisma.agentMatin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agentMatinWithIdOnly = await prisma.agentMatin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgentMatinFindManyArgs>(args?: SelectSubset<T, AgentMatinFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentMatinPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AgentMatin.
     * @param {AgentMatinCreateArgs} args - Arguments to create a AgentMatin.
     * @example
     * // Create one AgentMatin
     * const AgentMatin = await prisma.agentMatin.create({
     *   data: {
     *     // ... data to create a AgentMatin
     *   }
     * })
     * 
     */
    create<T extends AgentMatinCreateArgs>(args: SelectSubset<T, AgentMatinCreateArgs<ExtArgs>>): Prisma__AgentMatinClient<$Result.GetResult<Prisma.$AgentMatinPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AgentMatins.
     * @param {AgentMatinCreateManyArgs} args - Arguments to create many AgentMatins.
     * @example
     * // Create many AgentMatins
     * const agentMatin = await prisma.agentMatin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgentMatinCreateManyArgs>(args?: SelectSubset<T, AgentMatinCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AgentMatin.
     * @param {AgentMatinDeleteArgs} args - Arguments to delete one AgentMatin.
     * @example
     * // Delete one AgentMatin
     * const AgentMatin = await prisma.agentMatin.delete({
     *   where: {
     *     // ... filter to delete one AgentMatin
     *   }
     * })
     * 
     */
    delete<T extends AgentMatinDeleteArgs>(args: SelectSubset<T, AgentMatinDeleteArgs<ExtArgs>>): Prisma__AgentMatinClient<$Result.GetResult<Prisma.$AgentMatinPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AgentMatin.
     * @param {AgentMatinUpdateArgs} args - Arguments to update one AgentMatin.
     * @example
     * // Update one AgentMatin
     * const agentMatin = await prisma.agentMatin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgentMatinUpdateArgs>(args: SelectSubset<T, AgentMatinUpdateArgs<ExtArgs>>): Prisma__AgentMatinClient<$Result.GetResult<Prisma.$AgentMatinPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AgentMatins.
     * @param {AgentMatinDeleteManyArgs} args - Arguments to filter AgentMatins to delete.
     * @example
     * // Delete a few AgentMatins
     * const { count } = await prisma.agentMatin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgentMatinDeleteManyArgs>(args?: SelectSubset<T, AgentMatinDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgentMatins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentMatinUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AgentMatins
     * const agentMatin = await prisma.agentMatin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgentMatinUpdateManyArgs>(args: SelectSubset<T, AgentMatinUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AgentMatin.
     * @param {AgentMatinUpsertArgs} args - Arguments to update or create a AgentMatin.
     * @example
     * // Update or create a AgentMatin
     * const agentMatin = await prisma.agentMatin.upsert({
     *   create: {
     *     // ... data to create a AgentMatin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AgentMatin we want to update
     *   }
     * })
     */
    upsert<T extends AgentMatinUpsertArgs>(args: SelectSubset<T, AgentMatinUpsertArgs<ExtArgs>>): Prisma__AgentMatinClient<$Result.GetResult<Prisma.$AgentMatinPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AgentMatins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentMatinCountArgs} args - Arguments to filter AgentMatins to count.
     * @example
     * // Count the number of AgentMatins
     * const count = await prisma.agentMatin.count({
     *   where: {
     *     // ... the filter for the AgentMatins we want to count
     *   }
     * })
    **/
    count<T extends AgentMatinCountArgs>(
      args?: Subset<T, AgentMatinCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgentMatinCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AgentMatin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentMatinAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgentMatinAggregateArgs>(args: Subset<T, AgentMatinAggregateArgs>): Prisma.PrismaPromise<GetAgentMatinAggregateType<T>>

    /**
     * Group by AgentMatin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentMatinGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgentMatinGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgentMatinGroupByArgs['orderBy'] }
        : { orderBy?: AgentMatinGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgentMatinGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgentMatinGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AgentMatin model
   */
  readonly fields: AgentMatinFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AgentMatin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgentMatinClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agent<T extends AgentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgentDefaultArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AgentMatin model
   */ 
  interface AgentMatinFieldRefs {
    readonly id: FieldRef<"AgentMatin", 'Int'>
    readonly idAgent: FieldRef<"AgentMatin", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AgentMatin findUnique
   */
  export type AgentMatinFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentMatin
     */
    select?: AgentMatinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentMatinInclude<ExtArgs> | null
    /**
     * Filter, which AgentMatin to fetch.
     */
    where: AgentMatinWhereUniqueInput
  }

  /**
   * AgentMatin findUniqueOrThrow
   */
  export type AgentMatinFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentMatin
     */
    select?: AgentMatinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentMatinInclude<ExtArgs> | null
    /**
     * Filter, which AgentMatin to fetch.
     */
    where: AgentMatinWhereUniqueInput
  }

  /**
   * AgentMatin findFirst
   */
  export type AgentMatinFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentMatin
     */
    select?: AgentMatinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentMatinInclude<ExtArgs> | null
    /**
     * Filter, which AgentMatin to fetch.
     */
    where?: AgentMatinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentMatins to fetch.
     */
    orderBy?: AgentMatinOrderByWithRelationInput | AgentMatinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgentMatins.
     */
    cursor?: AgentMatinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentMatins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentMatins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgentMatins.
     */
    distinct?: AgentMatinScalarFieldEnum | AgentMatinScalarFieldEnum[]
  }

  /**
   * AgentMatin findFirstOrThrow
   */
  export type AgentMatinFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentMatin
     */
    select?: AgentMatinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentMatinInclude<ExtArgs> | null
    /**
     * Filter, which AgentMatin to fetch.
     */
    where?: AgentMatinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentMatins to fetch.
     */
    orderBy?: AgentMatinOrderByWithRelationInput | AgentMatinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgentMatins.
     */
    cursor?: AgentMatinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentMatins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentMatins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgentMatins.
     */
    distinct?: AgentMatinScalarFieldEnum | AgentMatinScalarFieldEnum[]
  }

  /**
   * AgentMatin findMany
   */
  export type AgentMatinFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentMatin
     */
    select?: AgentMatinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentMatinInclude<ExtArgs> | null
    /**
     * Filter, which AgentMatins to fetch.
     */
    where?: AgentMatinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentMatins to fetch.
     */
    orderBy?: AgentMatinOrderByWithRelationInput | AgentMatinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AgentMatins.
     */
    cursor?: AgentMatinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentMatins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentMatins.
     */
    skip?: number
    distinct?: AgentMatinScalarFieldEnum | AgentMatinScalarFieldEnum[]
  }

  /**
   * AgentMatin create
   */
  export type AgentMatinCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentMatin
     */
    select?: AgentMatinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentMatinInclude<ExtArgs> | null
    /**
     * The data needed to create a AgentMatin.
     */
    data: XOR<AgentMatinCreateInput, AgentMatinUncheckedCreateInput>
  }

  /**
   * AgentMatin createMany
   */
  export type AgentMatinCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AgentMatins.
     */
    data: AgentMatinCreateManyInput | AgentMatinCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AgentMatin update
   */
  export type AgentMatinUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentMatin
     */
    select?: AgentMatinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentMatinInclude<ExtArgs> | null
    /**
     * The data needed to update a AgentMatin.
     */
    data: XOR<AgentMatinUpdateInput, AgentMatinUncheckedUpdateInput>
    /**
     * Choose, which AgentMatin to update.
     */
    where: AgentMatinWhereUniqueInput
  }

  /**
   * AgentMatin updateMany
   */
  export type AgentMatinUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AgentMatins.
     */
    data: XOR<AgentMatinUpdateManyMutationInput, AgentMatinUncheckedUpdateManyInput>
    /**
     * Filter which AgentMatins to update
     */
    where?: AgentMatinWhereInput
  }

  /**
   * AgentMatin upsert
   */
  export type AgentMatinUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentMatin
     */
    select?: AgentMatinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentMatinInclude<ExtArgs> | null
    /**
     * The filter to search for the AgentMatin to update in case it exists.
     */
    where: AgentMatinWhereUniqueInput
    /**
     * In case the AgentMatin found by the `where` argument doesn't exist, create a new AgentMatin with this data.
     */
    create: XOR<AgentMatinCreateInput, AgentMatinUncheckedCreateInput>
    /**
     * In case the AgentMatin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgentMatinUpdateInput, AgentMatinUncheckedUpdateInput>
  }

  /**
   * AgentMatin delete
   */
  export type AgentMatinDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentMatin
     */
    select?: AgentMatinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentMatinInclude<ExtArgs> | null
    /**
     * Filter which AgentMatin to delete.
     */
    where: AgentMatinWhereUniqueInput
  }

  /**
   * AgentMatin deleteMany
   */
  export type AgentMatinDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgentMatins to delete
     */
    where?: AgentMatinWhereInput
  }

  /**
   * AgentMatin without action
   */
  export type AgentMatinDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentMatin
     */
    select?: AgentMatinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentMatinInclude<ExtArgs> | null
  }


  /**
   * Model AgentSoiree
   */

  export type AggregateAgentSoiree = {
    _count: AgentSoireeCountAggregateOutputType | null
    _avg: AgentSoireeAvgAggregateOutputType | null
    _sum: AgentSoireeSumAggregateOutputType | null
    _min: AgentSoireeMinAggregateOutputType | null
    _max: AgentSoireeMaxAggregateOutputType | null
  }

  export type AgentSoireeAvgAggregateOutputType = {
    id: number | null
    idAgent: number | null
  }

  export type AgentSoireeSumAggregateOutputType = {
    id: number | null
    idAgent: number | null
  }

  export type AgentSoireeMinAggregateOutputType = {
    id: number | null
    idAgent: number | null
  }

  export type AgentSoireeMaxAggregateOutputType = {
    id: number | null
    idAgent: number | null
  }

  export type AgentSoireeCountAggregateOutputType = {
    id: number
    idAgent: number
    _all: number
  }


  export type AgentSoireeAvgAggregateInputType = {
    id?: true
    idAgent?: true
  }

  export type AgentSoireeSumAggregateInputType = {
    id?: true
    idAgent?: true
  }

  export type AgentSoireeMinAggregateInputType = {
    id?: true
    idAgent?: true
  }

  export type AgentSoireeMaxAggregateInputType = {
    id?: true
    idAgent?: true
  }

  export type AgentSoireeCountAggregateInputType = {
    id?: true
    idAgent?: true
    _all?: true
  }

  export type AgentSoireeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgentSoiree to aggregate.
     */
    where?: AgentSoireeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentSoirees to fetch.
     */
    orderBy?: AgentSoireeOrderByWithRelationInput | AgentSoireeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgentSoireeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentSoirees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentSoirees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AgentSoirees
    **/
    _count?: true | AgentSoireeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgentSoireeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgentSoireeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgentSoireeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgentSoireeMaxAggregateInputType
  }

  export type GetAgentSoireeAggregateType<T extends AgentSoireeAggregateArgs> = {
        [P in keyof T & keyof AggregateAgentSoiree]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgentSoiree[P]>
      : GetScalarType<T[P], AggregateAgentSoiree[P]>
  }




  export type AgentSoireeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentSoireeWhereInput
    orderBy?: AgentSoireeOrderByWithAggregationInput | AgentSoireeOrderByWithAggregationInput[]
    by: AgentSoireeScalarFieldEnum[] | AgentSoireeScalarFieldEnum
    having?: AgentSoireeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgentSoireeCountAggregateInputType | true
    _avg?: AgentSoireeAvgAggregateInputType
    _sum?: AgentSoireeSumAggregateInputType
    _min?: AgentSoireeMinAggregateInputType
    _max?: AgentSoireeMaxAggregateInputType
  }

  export type AgentSoireeGroupByOutputType = {
    id: number
    idAgent: number
    _count: AgentSoireeCountAggregateOutputType | null
    _avg: AgentSoireeAvgAggregateOutputType | null
    _sum: AgentSoireeSumAggregateOutputType | null
    _min: AgentSoireeMinAggregateOutputType | null
    _max: AgentSoireeMaxAggregateOutputType | null
  }

  type GetAgentSoireeGroupByPayload<T extends AgentSoireeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgentSoireeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgentSoireeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgentSoireeGroupByOutputType[P]>
            : GetScalarType<T[P], AgentSoireeGroupByOutputType[P]>
        }
      >
    >


  export type AgentSoireeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idAgent?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agentSoiree"]>


  export type AgentSoireeSelectScalar = {
    id?: boolean
    idAgent?: boolean
  }

  export type AgentSoireeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }

  export type $AgentSoireePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AgentSoiree"
    objects: {
      agent: Prisma.$AgentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      idAgent: number
    }, ExtArgs["result"]["agentSoiree"]>
    composites: {}
  }

  type AgentSoireeGetPayload<S extends boolean | null | undefined | AgentSoireeDefaultArgs> = $Result.GetResult<Prisma.$AgentSoireePayload, S>

  type AgentSoireeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AgentSoireeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AgentSoireeCountAggregateInputType | true
    }

  export interface AgentSoireeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AgentSoiree'], meta: { name: 'AgentSoiree' } }
    /**
     * Find zero or one AgentSoiree that matches the filter.
     * @param {AgentSoireeFindUniqueArgs} args - Arguments to find a AgentSoiree
     * @example
     * // Get one AgentSoiree
     * const agentSoiree = await prisma.agentSoiree.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgentSoireeFindUniqueArgs>(args: SelectSubset<T, AgentSoireeFindUniqueArgs<ExtArgs>>): Prisma__AgentSoireeClient<$Result.GetResult<Prisma.$AgentSoireePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AgentSoiree that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AgentSoireeFindUniqueOrThrowArgs} args - Arguments to find a AgentSoiree
     * @example
     * // Get one AgentSoiree
     * const agentSoiree = await prisma.agentSoiree.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgentSoireeFindUniqueOrThrowArgs>(args: SelectSubset<T, AgentSoireeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgentSoireeClient<$Result.GetResult<Prisma.$AgentSoireePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AgentSoiree that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentSoireeFindFirstArgs} args - Arguments to find a AgentSoiree
     * @example
     * // Get one AgentSoiree
     * const agentSoiree = await prisma.agentSoiree.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgentSoireeFindFirstArgs>(args?: SelectSubset<T, AgentSoireeFindFirstArgs<ExtArgs>>): Prisma__AgentSoireeClient<$Result.GetResult<Prisma.$AgentSoireePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AgentSoiree that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentSoireeFindFirstOrThrowArgs} args - Arguments to find a AgentSoiree
     * @example
     * // Get one AgentSoiree
     * const agentSoiree = await prisma.agentSoiree.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgentSoireeFindFirstOrThrowArgs>(args?: SelectSubset<T, AgentSoireeFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgentSoireeClient<$Result.GetResult<Prisma.$AgentSoireePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AgentSoirees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentSoireeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AgentSoirees
     * const agentSoirees = await prisma.agentSoiree.findMany()
     * 
     * // Get first 10 AgentSoirees
     * const agentSoirees = await prisma.agentSoiree.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agentSoireeWithIdOnly = await prisma.agentSoiree.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgentSoireeFindManyArgs>(args?: SelectSubset<T, AgentSoireeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentSoireePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AgentSoiree.
     * @param {AgentSoireeCreateArgs} args - Arguments to create a AgentSoiree.
     * @example
     * // Create one AgentSoiree
     * const AgentSoiree = await prisma.agentSoiree.create({
     *   data: {
     *     // ... data to create a AgentSoiree
     *   }
     * })
     * 
     */
    create<T extends AgentSoireeCreateArgs>(args: SelectSubset<T, AgentSoireeCreateArgs<ExtArgs>>): Prisma__AgentSoireeClient<$Result.GetResult<Prisma.$AgentSoireePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AgentSoirees.
     * @param {AgentSoireeCreateManyArgs} args - Arguments to create many AgentSoirees.
     * @example
     * // Create many AgentSoirees
     * const agentSoiree = await prisma.agentSoiree.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgentSoireeCreateManyArgs>(args?: SelectSubset<T, AgentSoireeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AgentSoiree.
     * @param {AgentSoireeDeleteArgs} args - Arguments to delete one AgentSoiree.
     * @example
     * // Delete one AgentSoiree
     * const AgentSoiree = await prisma.agentSoiree.delete({
     *   where: {
     *     // ... filter to delete one AgentSoiree
     *   }
     * })
     * 
     */
    delete<T extends AgentSoireeDeleteArgs>(args: SelectSubset<T, AgentSoireeDeleteArgs<ExtArgs>>): Prisma__AgentSoireeClient<$Result.GetResult<Prisma.$AgentSoireePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AgentSoiree.
     * @param {AgentSoireeUpdateArgs} args - Arguments to update one AgentSoiree.
     * @example
     * // Update one AgentSoiree
     * const agentSoiree = await prisma.agentSoiree.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgentSoireeUpdateArgs>(args: SelectSubset<T, AgentSoireeUpdateArgs<ExtArgs>>): Prisma__AgentSoireeClient<$Result.GetResult<Prisma.$AgentSoireePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AgentSoirees.
     * @param {AgentSoireeDeleteManyArgs} args - Arguments to filter AgentSoirees to delete.
     * @example
     * // Delete a few AgentSoirees
     * const { count } = await prisma.agentSoiree.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgentSoireeDeleteManyArgs>(args?: SelectSubset<T, AgentSoireeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgentSoirees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentSoireeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AgentSoirees
     * const agentSoiree = await prisma.agentSoiree.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgentSoireeUpdateManyArgs>(args: SelectSubset<T, AgentSoireeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AgentSoiree.
     * @param {AgentSoireeUpsertArgs} args - Arguments to update or create a AgentSoiree.
     * @example
     * // Update or create a AgentSoiree
     * const agentSoiree = await prisma.agentSoiree.upsert({
     *   create: {
     *     // ... data to create a AgentSoiree
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AgentSoiree we want to update
     *   }
     * })
     */
    upsert<T extends AgentSoireeUpsertArgs>(args: SelectSubset<T, AgentSoireeUpsertArgs<ExtArgs>>): Prisma__AgentSoireeClient<$Result.GetResult<Prisma.$AgentSoireePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AgentSoirees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentSoireeCountArgs} args - Arguments to filter AgentSoirees to count.
     * @example
     * // Count the number of AgentSoirees
     * const count = await prisma.agentSoiree.count({
     *   where: {
     *     // ... the filter for the AgentSoirees we want to count
     *   }
     * })
    **/
    count<T extends AgentSoireeCountArgs>(
      args?: Subset<T, AgentSoireeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgentSoireeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AgentSoiree.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentSoireeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgentSoireeAggregateArgs>(args: Subset<T, AgentSoireeAggregateArgs>): Prisma.PrismaPromise<GetAgentSoireeAggregateType<T>>

    /**
     * Group by AgentSoiree.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentSoireeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgentSoireeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgentSoireeGroupByArgs['orderBy'] }
        : { orderBy?: AgentSoireeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgentSoireeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgentSoireeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AgentSoiree model
   */
  readonly fields: AgentSoireeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AgentSoiree.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgentSoireeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agent<T extends AgentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgentDefaultArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AgentSoiree model
   */ 
  interface AgentSoireeFieldRefs {
    readonly id: FieldRef<"AgentSoiree", 'Int'>
    readonly idAgent: FieldRef<"AgentSoiree", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AgentSoiree findUnique
   */
  export type AgentSoireeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSoiree
     */
    select?: AgentSoireeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSoireeInclude<ExtArgs> | null
    /**
     * Filter, which AgentSoiree to fetch.
     */
    where: AgentSoireeWhereUniqueInput
  }

  /**
   * AgentSoiree findUniqueOrThrow
   */
  export type AgentSoireeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSoiree
     */
    select?: AgentSoireeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSoireeInclude<ExtArgs> | null
    /**
     * Filter, which AgentSoiree to fetch.
     */
    where: AgentSoireeWhereUniqueInput
  }

  /**
   * AgentSoiree findFirst
   */
  export type AgentSoireeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSoiree
     */
    select?: AgentSoireeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSoireeInclude<ExtArgs> | null
    /**
     * Filter, which AgentSoiree to fetch.
     */
    where?: AgentSoireeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentSoirees to fetch.
     */
    orderBy?: AgentSoireeOrderByWithRelationInput | AgentSoireeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgentSoirees.
     */
    cursor?: AgentSoireeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentSoirees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentSoirees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgentSoirees.
     */
    distinct?: AgentSoireeScalarFieldEnum | AgentSoireeScalarFieldEnum[]
  }

  /**
   * AgentSoiree findFirstOrThrow
   */
  export type AgentSoireeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSoiree
     */
    select?: AgentSoireeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSoireeInclude<ExtArgs> | null
    /**
     * Filter, which AgentSoiree to fetch.
     */
    where?: AgentSoireeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentSoirees to fetch.
     */
    orderBy?: AgentSoireeOrderByWithRelationInput | AgentSoireeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgentSoirees.
     */
    cursor?: AgentSoireeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentSoirees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentSoirees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgentSoirees.
     */
    distinct?: AgentSoireeScalarFieldEnum | AgentSoireeScalarFieldEnum[]
  }

  /**
   * AgentSoiree findMany
   */
  export type AgentSoireeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSoiree
     */
    select?: AgentSoireeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSoireeInclude<ExtArgs> | null
    /**
     * Filter, which AgentSoirees to fetch.
     */
    where?: AgentSoireeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentSoirees to fetch.
     */
    orderBy?: AgentSoireeOrderByWithRelationInput | AgentSoireeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AgentSoirees.
     */
    cursor?: AgentSoireeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentSoirees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentSoirees.
     */
    skip?: number
    distinct?: AgentSoireeScalarFieldEnum | AgentSoireeScalarFieldEnum[]
  }

  /**
   * AgentSoiree create
   */
  export type AgentSoireeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSoiree
     */
    select?: AgentSoireeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSoireeInclude<ExtArgs> | null
    /**
     * The data needed to create a AgentSoiree.
     */
    data: XOR<AgentSoireeCreateInput, AgentSoireeUncheckedCreateInput>
  }

  /**
   * AgentSoiree createMany
   */
  export type AgentSoireeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AgentSoirees.
     */
    data: AgentSoireeCreateManyInput | AgentSoireeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AgentSoiree update
   */
  export type AgentSoireeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSoiree
     */
    select?: AgentSoireeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSoireeInclude<ExtArgs> | null
    /**
     * The data needed to update a AgentSoiree.
     */
    data: XOR<AgentSoireeUpdateInput, AgentSoireeUncheckedUpdateInput>
    /**
     * Choose, which AgentSoiree to update.
     */
    where: AgentSoireeWhereUniqueInput
  }

  /**
   * AgentSoiree updateMany
   */
  export type AgentSoireeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AgentSoirees.
     */
    data: XOR<AgentSoireeUpdateManyMutationInput, AgentSoireeUncheckedUpdateManyInput>
    /**
     * Filter which AgentSoirees to update
     */
    where?: AgentSoireeWhereInput
  }

  /**
   * AgentSoiree upsert
   */
  export type AgentSoireeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSoiree
     */
    select?: AgentSoireeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSoireeInclude<ExtArgs> | null
    /**
     * The filter to search for the AgentSoiree to update in case it exists.
     */
    where: AgentSoireeWhereUniqueInput
    /**
     * In case the AgentSoiree found by the `where` argument doesn't exist, create a new AgentSoiree with this data.
     */
    create: XOR<AgentSoireeCreateInput, AgentSoireeUncheckedCreateInput>
    /**
     * In case the AgentSoiree was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgentSoireeUpdateInput, AgentSoireeUncheckedUpdateInput>
  }

  /**
   * AgentSoiree delete
   */
  export type AgentSoireeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSoiree
     */
    select?: AgentSoireeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSoireeInclude<ExtArgs> | null
    /**
     * Filter which AgentSoiree to delete.
     */
    where: AgentSoireeWhereUniqueInput
  }

  /**
   * AgentSoiree deleteMany
   */
  export type AgentSoireeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgentSoirees to delete
     */
    where?: AgentSoireeWhereInput
  }

  /**
   * AgentSoiree without action
   */
  export type AgentSoireeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSoiree
     */
    select?: AgentSoireeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSoireeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const DepartementScalarFieldEnum: {
    id: 'id',
    Nom: 'Nom'
  };

  export type DepartementScalarFieldEnum = (typeof DepartementScalarFieldEnum)[keyof typeof DepartementScalarFieldEnum]


  export const SalaireHeureScalarFieldEnum: {
    id: 'id',
    Montant: 'Montant'
  };

  export type SalaireHeureScalarFieldEnum = (typeof SalaireHeureScalarFieldEnum)[keyof typeof SalaireHeureScalarFieldEnum]


  export const TitreScalarFieldEnum: {
    id: 'id',
    Intitule: 'Intitule',
    idSalaire: 'idSalaire'
  };

  export type TitreScalarFieldEnum = (typeof TitreScalarFieldEnum)[keyof typeof TitreScalarFieldEnum]


  export const AgentScalarFieldEnum: {
    id: 'id',
    Nom: 'Nom',
    PostNom: 'PostNom',
    Prenom: 'Prenom',
    Matricule: 'Matricule',
    Mdp: 'Mdp',
    Telehone: 'Telehone',
    Status: 'Status',
    idDepartement: 'idDepartement',
    idTitre: 'idTitre'
  };

  export type AgentScalarFieldEnum = (typeof AgentScalarFieldEnum)[keyof typeof AgentScalarFieldEnum]


  export const PresenceScalarFieldEnum: {
    id: 'id',
    idAgent: 'idAgent',
    Date: 'Date',
    HeureArrivee: 'HeureArrivee',
    HeureSortie: 'HeureSortie'
  };

  export type PresenceScalarFieldEnum = (typeof PresenceScalarFieldEnum)[keyof typeof PresenceScalarFieldEnum]


  export const AgentMatinScalarFieldEnum: {
    id: 'id',
    idAgent: 'idAgent'
  };

  export type AgentMatinScalarFieldEnum = (typeof AgentMatinScalarFieldEnum)[keyof typeof AgentMatinScalarFieldEnum]


  export const AgentSoireeScalarFieldEnum: {
    id: 'id',
    idAgent: 'idAgent'
  };

  export type AgentSoireeScalarFieldEnum = (typeof AgentSoireeScalarFieldEnum)[keyof typeof AgentSoireeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const DepartementOrderByRelevanceFieldEnum: {
    Nom: 'Nom'
  };

  export type DepartementOrderByRelevanceFieldEnum = (typeof DepartementOrderByRelevanceFieldEnum)[keyof typeof DepartementOrderByRelevanceFieldEnum]


  export const TitreOrderByRelevanceFieldEnum: {
    Intitule: 'Intitule'
  };

  export type TitreOrderByRelevanceFieldEnum = (typeof TitreOrderByRelevanceFieldEnum)[keyof typeof TitreOrderByRelevanceFieldEnum]


  export const AgentOrderByRelevanceFieldEnum: {
    Nom: 'Nom',
    PostNom: 'PostNom',
    Prenom: 'Prenom',
    Matricule: 'Matricule',
    Mdp: 'Mdp',
    Telehone: 'Telehone'
  };

  export type AgentOrderByRelevanceFieldEnum = (typeof AgentOrderByRelevanceFieldEnum)[keyof typeof AgentOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type DepartementWhereInput = {
    AND?: DepartementWhereInput | DepartementWhereInput[]
    OR?: DepartementWhereInput[]
    NOT?: DepartementWhereInput | DepartementWhereInput[]
    id?: IntFilter<"Departement"> | number
    Nom?: StringFilter<"Departement"> | string
    agents?: AgentListRelationFilter
  }

  export type DepartementOrderByWithRelationInput = {
    id?: SortOrder
    Nom?: SortOrder
    agents?: AgentOrderByRelationAggregateInput
    _relevance?: DepartementOrderByRelevanceInput
  }

  export type DepartementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DepartementWhereInput | DepartementWhereInput[]
    OR?: DepartementWhereInput[]
    NOT?: DepartementWhereInput | DepartementWhereInput[]
    Nom?: StringFilter<"Departement"> | string
    agents?: AgentListRelationFilter
  }, "id">

  export type DepartementOrderByWithAggregationInput = {
    id?: SortOrder
    Nom?: SortOrder
    _count?: DepartementCountOrderByAggregateInput
    _avg?: DepartementAvgOrderByAggregateInput
    _max?: DepartementMaxOrderByAggregateInput
    _min?: DepartementMinOrderByAggregateInput
    _sum?: DepartementSumOrderByAggregateInput
  }

  export type DepartementScalarWhereWithAggregatesInput = {
    AND?: DepartementScalarWhereWithAggregatesInput | DepartementScalarWhereWithAggregatesInput[]
    OR?: DepartementScalarWhereWithAggregatesInput[]
    NOT?: DepartementScalarWhereWithAggregatesInput | DepartementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Departement"> | number
    Nom?: StringWithAggregatesFilter<"Departement"> | string
  }

  export type SalaireHeureWhereInput = {
    AND?: SalaireHeureWhereInput | SalaireHeureWhereInput[]
    OR?: SalaireHeureWhereInput[]
    NOT?: SalaireHeureWhereInput | SalaireHeureWhereInput[]
    id?: IntFilter<"SalaireHeure"> | number
    Montant?: IntFilter<"SalaireHeure"> | number
    titres?: TitreListRelationFilter
  }

  export type SalaireHeureOrderByWithRelationInput = {
    id?: SortOrder
    Montant?: SortOrder
    titres?: TitreOrderByRelationAggregateInput
  }

  export type SalaireHeureWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SalaireHeureWhereInput | SalaireHeureWhereInput[]
    OR?: SalaireHeureWhereInput[]
    NOT?: SalaireHeureWhereInput | SalaireHeureWhereInput[]
    Montant?: IntFilter<"SalaireHeure"> | number
    titres?: TitreListRelationFilter
  }, "id">

  export type SalaireHeureOrderByWithAggregationInput = {
    id?: SortOrder
    Montant?: SortOrder
    _count?: SalaireHeureCountOrderByAggregateInput
    _avg?: SalaireHeureAvgOrderByAggregateInput
    _max?: SalaireHeureMaxOrderByAggregateInput
    _min?: SalaireHeureMinOrderByAggregateInput
    _sum?: SalaireHeureSumOrderByAggregateInput
  }

  export type SalaireHeureScalarWhereWithAggregatesInput = {
    AND?: SalaireHeureScalarWhereWithAggregatesInput | SalaireHeureScalarWhereWithAggregatesInput[]
    OR?: SalaireHeureScalarWhereWithAggregatesInput[]
    NOT?: SalaireHeureScalarWhereWithAggregatesInput | SalaireHeureScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SalaireHeure"> | number
    Montant?: IntWithAggregatesFilter<"SalaireHeure"> | number
  }

  export type TitreWhereInput = {
    AND?: TitreWhereInput | TitreWhereInput[]
    OR?: TitreWhereInput[]
    NOT?: TitreWhereInput | TitreWhereInput[]
    id?: IntFilter<"Titre"> | number
    Intitule?: StringFilter<"Titre"> | string
    idSalaire?: IntFilter<"Titre"> | number
    salaire?: XOR<SalaireHeureScalarRelationFilter, SalaireHeureWhereInput>
    agents?: AgentListRelationFilter
  }

  export type TitreOrderByWithRelationInput = {
    id?: SortOrder
    Intitule?: SortOrder
    idSalaire?: SortOrder
    salaire?: SalaireHeureOrderByWithRelationInput
    agents?: AgentOrderByRelationAggregateInput
    _relevance?: TitreOrderByRelevanceInput
  }

  export type TitreWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TitreWhereInput | TitreWhereInput[]
    OR?: TitreWhereInput[]
    NOT?: TitreWhereInput | TitreWhereInput[]
    Intitule?: StringFilter<"Titre"> | string
    idSalaire?: IntFilter<"Titre"> | number
    salaire?: XOR<SalaireHeureScalarRelationFilter, SalaireHeureWhereInput>
    agents?: AgentListRelationFilter
  }, "id">

  export type TitreOrderByWithAggregationInput = {
    id?: SortOrder
    Intitule?: SortOrder
    idSalaire?: SortOrder
    _count?: TitreCountOrderByAggregateInput
    _avg?: TitreAvgOrderByAggregateInput
    _max?: TitreMaxOrderByAggregateInput
    _min?: TitreMinOrderByAggregateInput
    _sum?: TitreSumOrderByAggregateInput
  }

  export type TitreScalarWhereWithAggregatesInput = {
    AND?: TitreScalarWhereWithAggregatesInput | TitreScalarWhereWithAggregatesInput[]
    OR?: TitreScalarWhereWithAggregatesInput[]
    NOT?: TitreScalarWhereWithAggregatesInput | TitreScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Titre"> | number
    Intitule?: StringWithAggregatesFilter<"Titre"> | string
    idSalaire?: IntWithAggregatesFilter<"Titre"> | number
  }

  export type AgentWhereInput = {
    AND?: AgentWhereInput | AgentWhereInput[]
    OR?: AgentWhereInput[]
    NOT?: AgentWhereInput | AgentWhereInput[]
    id?: IntFilter<"Agent"> | number
    Nom?: StringFilter<"Agent"> | string
    PostNom?: StringFilter<"Agent"> | string
    Prenom?: StringFilter<"Agent"> | string
    Matricule?: StringFilter<"Agent"> | string
    Mdp?: StringFilter<"Agent"> | string
    Telehone?: StringFilter<"Agent"> | string
    Status?: BoolFilter<"Agent"> | boolean
    idDepartement?: IntFilter<"Agent"> | number
    idTitre?: IntFilter<"Agent"> | number
    departement?: XOR<DepartementScalarRelationFilter, DepartementWhereInput>
    titre?: XOR<TitreScalarRelationFilter, TitreWhereInput>
    presences?: PresenceListRelationFilter
    agentMatin?: AgentMatinListRelationFilter
    agentSoiree?: AgentSoireeListRelationFilter
  }

  export type AgentOrderByWithRelationInput = {
    id?: SortOrder
    Nom?: SortOrder
    PostNom?: SortOrder
    Prenom?: SortOrder
    Matricule?: SortOrder
    Mdp?: SortOrder
    Telehone?: SortOrder
    Status?: SortOrder
    idDepartement?: SortOrder
    idTitre?: SortOrder
    departement?: DepartementOrderByWithRelationInput
    titre?: TitreOrderByWithRelationInput
    presences?: PresenceOrderByRelationAggregateInput
    agentMatin?: AgentMatinOrderByRelationAggregateInput
    agentSoiree?: AgentSoireeOrderByRelationAggregateInput
    _relevance?: AgentOrderByRelevanceInput
  }

  export type AgentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AgentWhereInput | AgentWhereInput[]
    OR?: AgentWhereInput[]
    NOT?: AgentWhereInput | AgentWhereInput[]
    Nom?: StringFilter<"Agent"> | string
    PostNom?: StringFilter<"Agent"> | string
    Prenom?: StringFilter<"Agent"> | string
    Matricule?: StringFilter<"Agent"> | string
    Mdp?: StringFilter<"Agent"> | string
    Telehone?: StringFilter<"Agent"> | string
    Status?: BoolFilter<"Agent"> | boolean
    idDepartement?: IntFilter<"Agent"> | number
    idTitre?: IntFilter<"Agent"> | number
    departement?: XOR<DepartementScalarRelationFilter, DepartementWhereInput>
    titre?: XOR<TitreScalarRelationFilter, TitreWhereInput>
    presences?: PresenceListRelationFilter
    agentMatin?: AgentMatinListRelationFilter
    agentSoiree?: AgentSoireeListRelationFilter
  }, "id">

  export type AgentOrderByWithAggregationInput = {
    id?: SortOrder
    Nom?: SortOrder
    PostNom?: SortOrder
    Prenom?: SortOrder
    Matricule?: SortOrder
    Mdp?: SortOrder
    Telehone?: SortOrder
    Status?: SortOrder
    idDepartement?: SortOrder
    idTitre?: SortOrder
    _count?: AgentCountOrderByAggregateInput
    _avg?: AgentAvgOrderByAggregateInput
    _max?: AgentMaxOrderByAggregateInput
    _min?: AgentMinOrderByAggregateInput
    _sum?: AgentSumOrderByAggregateInput
  }

  export type AgentScalarWhereWithAggregatesInput = {
    AND?: AgentScalarWhereWithAggregatesInput | AgentScalarWhereWithAggregatesInput[]
    OR?: AgentScalarWhereWithAggregatesInput[]
    NOT?: AgentScalarWhereWithAggregatesInput | AgentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Agent"> | number
    Nom?: StringWithAggregatesFilter<"Agent"> | string
    PostNom?: StringWithAggregatesFilter<"Agent"> | string
    Prenom?: StringWithAggregatesFilter<"Agent"> | string
    Matricule?: StringWithAggregatesFilter<"Agent"> | string
    Mdp?: StringWithAggregatesFilter<"Agent"> | string
    Telehone?: StringWithAggregatesFilter<"Agent"> | string
    Status?: BoolWithAggregatesFilter<"Agent"> | boolean
    idDepartement?: IntWithAggregatesFilter<"Agent"> | number
    idTitre?: IntWithAggregatesFilter<"Agent"> | number
  }

  export type PresenceWhereInput = {
    AND?: PresenceWhereInput | PresenceWhereInput[]
    OR?: PresenceWhereInput[]
    NOT?: PresenceWhereInput | PresenceWhereInput[]
    id?: IntFilter<"Presence"> | number
    idAgent?: IntFilter<"Presence"> | number
    Date?: DateTimeFilter<"Presence"> | Date | string
    HeureArrivee?: DateTimeFilter<"Presence"> | Date | string
    HeureSortie?: DateTimeFilter<"Presence"> | Date | string
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }

  export type PresenceOrderByWithRelationInput = {
    id?: SortOrder
    idAgent?: SortOrder
    Date?: SortOrder
    HeureArrivee?: SortOrder
    HeureSortie?: SortOrder
    agent?: AgentOrderByWithRelationInput
  }

  export type PresenceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PresenceWhereInput | PresenceWhereInput[]
    OR?: PresenceWhereInput[]
    NOT?: PresenceWhereInput | PresenceWhereInput[]
    idAgent?: IntFilter<"Presence"> | number
    Date?: DateTimeFilter<"Presence"> | Date | string
    HeureArrivee?: DateTimeFilter<"Presence"> | Date | string
    HeureSortie?: DateTimeFilter<"Presence"> | Date | string
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }, "id">

  export type PresenceOrderByWithAggregationInput = {
    id?: SortOrder
    idAgent?: SortOrder
    Date?: SortOrder
    HeureArrivee?: SortOrder
    HeureSortie?: SortOrder
    _count?: PresenceCountOrderByAggregateInput
    _avg?: PresenceAvgOrderByAggregateInput
    _max?: PresenceMaxOrderByAggregateInput
    _min?: PresenceMinOrderByAggregateInput
    _sum?: PresenceSumOrderByAggregateInput
  }

  export type PresenceScalarWhereWithAggregatesInput = {
    AND?: PresenceScalarWhereWithAggregatesInput | PresenceScalarWhereWithAggregatesInput[]
    OR?: PresenceScalarWhereWithAggregatesInput[]
    NOT?: PresenceScalarWhereWithAggregatesInput | PresenceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Presence"> | number
    idAgent?: IntWithAggregatesFilter<"Presence"> | number
    Date?: DateTimeWithAggregatesFilter<"Presence"> | Date | string
    HeureArrivee?: DateTimeWithAggregatesFilter<"Presence"> | Date | string
    HeureSortie?: DateTimeWithAggregatesFilter<"Presence"> | Date | string
  }

  export type AgentMatinWhereInput = {
    AND?: AgentMatinWhereInput | AgentMatinWhereInput[]
    OR?: AgentMatinWhereInput[]
    NOT?: AgentMatinWhereInput | AgentMatinWhereInput[]
    id?: IntFilter<"AgentMatin"> | number
    idAgent?: IntFilter<"AgentMatin"> | number
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }

  export type AgentMatinOrderByWithRelationInput = {
    id?: SortOrder
    idAgent?: SortOrder
    agent?: AgentOrderByWithRelationInput
  }

  export type AgentMatinWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AgentMatinWhereInput | AgentMatinWhereInput[]
    OR?: AgentMatinWhereInput[]
    NOT?: AgentMatinWhereInput | AgentMatinWhereInput[]
    idAgent?: IntFilter<"AgentMatin"> | number
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }, "id">

  export type AgentMatinOrderByWithAggregationInput = {
    id?: SortOrder
    idAgent?: SortOrder
    _count?: AgentMatinCountOrderByAggregateInput
    _avg?: AgentMatinAvgOrderByAggregateInput
    _max?: AgentMatinMaxOrderByAggregateInput
    _min?: AgentMatinMinOrderByAggregateInput
    _sum?: AgentMatinSumOrderByAggregateInput
  }

  export type AgentMatinScalarWhereWithAggregatesInput = {
    AND?: AgentMatinScalarWhereWithAggregatesInput | AgentMatinScalarWhereWithAggregatesInput[]
    OR?: AgentMatinScalarWhereWithAggregatesInput[]
    NOT?: AgentMatinScalarWhereWithAggregatesInput | AgentMatinScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AgentMatin"> | number
    idAgent?: IntWithAggregatesFilter<"AgentMatin"> | number
  }

  export type AgentSoireeWhereInput = {
    AND?: AgentSoireeWhereInput | AgentSoireeWhereInput[]
    OR?: AgentSoireeWhereInput[]
    NOT?: AgentSoireeWhereInput | AgentSoireeWhereInput[]
    id?: IntFilter<"AgentSoiree"> | number
    idAgent?: IntFilter<"AgentSoiree"> | number
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }

  export type AgentSoireeOrderByWithRelationInput = {
    id?: SortOrder
    idAgent?: SortOrder
    agent?: AgentOrderByWithRelationInput
  }

  export type AgentSoireeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AgentSoireeWhereInput | AgentSoireeWhereInput[]
    OR?: AgentSoireeWhereInput[]
    NOT?: AgentSoireeWhereInput | AgentSoireeWhereInput[]
    idAgent?: IntFilter<"AgentSoiree"> | number
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }, "id">

  export type AgentSoireeOrderByWithAggregationInput = {
    id?: SortOrder
    idAgent?: SortOrder
    _count?: AgentSoireeCountOrderByAggregateInput
    _avg?: AgentSoireeAvgOrderByAggregateInput
    _max?: AgentSoireeMaxOrderByAggregateInput
    _min?: AgentSoireeMinOrderByAggregateInput
    _sum?: AgentSoireeSumOrderByAggregateInput
  }

  export type AgentSoireeScalarWhereWithAggregatesInput = {
    AND?: AgentSoireeScalarWhereWithAggregatesInput | AgentSoireeScalarWhereWithAggregatesInput[]
    OR?: AgentSoireeScalarWhereWithAggregatesInput[]
    NOT?: AgentSoireeScalarWhereWithAggregatesInput | AgentSoireeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AgentSoiree"> | number
    idAgent?: IntWithAggregatesFilter<"AgentSoiree"> | number
  }

  export type DepartementCreateInput = {
    Nom: string
    agents?: AgentCreateNestedManyWithoutDepartementInput
  }

  export type DepartementUncheckedCreateInput = {
    id?: number
    Nom: string
    agents?: AgentUncheckedCreateNestedManyWithoutDepartementInput
  }

  export type DepartementUpdateInput = {
    Nom?: StringFieldUpdateOperationsInput | string
    agents?: AgentUpdateManyWithoutDepartementNestedInput
  }

  export type DepartementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    agents?: AgentUncheckedUpdateManyWithoutDepartementNestedInput
  }

  export type DepartementCreateManyInput = {
    id?: number
    Nom: string
  }

  export type DepartementUpdateManyMutationInput = {
    Nom?: StringFieldUpdateOperationsInput | string
  }

  export type DepartementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
  }

  export type SalaireHeureCreateInput = {
    Montant: number
    titres?: TitreCreateNestedManyWithoutSalaireInput
  }

  export type SalaireHeureUncheckedCreateInput = {
    id?: number
    Montant: number
    titres?: TitreUncheckedCreateNestedManyWithoutSalaireInput
  }

  export type SalaireHeureUpdateInput = {
    Montant?: IntFieldUpdateOperationsInput | number
    titres?: TitreUpdateManyWithoutSalaireNestedInput
  }

  export type SalaireHeureUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Montant?: IntFieldUpdateOperationsInput | number
    titres?: TitreUncheckedUpdateManyWithoutSalaireNestedInput
  }

  export type SalaireHeureCreateManyInput = {
    id?: number
    Montant: number
  }

  export type SalaireHeureUpdateManyMutationInput = {
    Montant?: IntFieldUpdateOperationsInput | number
  }

  export type SalaireHeureUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Montant?: IntFieldUpdateOperationsInput | number
  }

  export type TitreCreateInput = {
    Intitule: string
    salaire: SalaireHeureCreateNestedOneWithoutTitresInput
    agents?: AgentCreateNestedManyWithoutTitreInput
  }

  export type TitreUncheckedCreateInput = {
    id?: number
    Intitule: string
    idSalaire: number
    agents?: AgentUncheckedCreateNestedManyWithoutTitreInput
  }

  export type TitreUpdateInput = {
    Intitule?: StringFieldUpdateOperationsInput | string
    salaire?: SalaireHeureUpdateOneRequiredWithoutTitresNestedInput
    agents?: AgentUpdateManyWithoutTitreNestedInput
  }

  export type TitreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Intitule?: StringFieldUpdateOperationsInput | string
    idSalaire?: IntFieldUpdateOperationsInput | number
    agents?: AgentUncheckedUpdateManyWithoutTitreNestedInput
  }

  export type TitreCreateManyInput = {
    id?: number
    Intitule: string
    idSalaire: number
  }

  export type TitreUpdateManyMutationInput = {
    Intitule?: StringFieldUpdateOperationsInput | string
  }

  export type TitreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Intitule?: StringFieldUpdateOperationsInput | string
    idSalaire?: IntFieldUpdateOperationsInput | number
  }

  export type AgentCreateInput = {
    Nom: string
    PostNom: string
    Prenom: string
    Matricule: string
    Mdp?: string
    Telehone?: string
    Status?: boolean
    departement: DepartementCreateNestedOneWithoutAgentsInput
    titre: TitreCreateNestedOneWithoutAgentsInput
    presences?: PresenceCreateNestedManyWithoutAgentInput
    agentMatin?: AgentMatinCreateNestedManyWithoutAgentInput
    agentSoiree?: AgentSoireeCreateNestedManyWithoutAgentInput
  }

  export type AgentUncheckedCreateInput = {
    id?: number
    Nom: string
    PostNom: string
    Prenom: string
    Matricule: string
    Mdp?: string
    Telehone?: string
    Status?: boolean
    idDepartement: number
    idTitre: number
    presences?: PresenceUncheckedCreateNestedManyWithoutAgentInput
    agentMatin?: AgentMatinUncheckedCreateNestedManyWithoutAgentInput
    agentSoiree?: AgentSoireeUncheckedCreateNestedManyWithoutAgentInput
  }

  export type AgentUpdateInput = {
    Nom?: StringFieldUpdateOperationsInput | string
    PostNom?: StringFieldUpdateOperationsInput | string
    Prenom?: StringFieldUpdateOperationsInput | string
    Matricule?: StringFieldUpdateOperationsInput | string
    Mdp?: StringFieldUpdateOperationsInput | string
    Telehone?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    departement?: DepartementUpdateOneRequiredWithoutAgentsNestedInput
    titre?: TitreUpdateOneRequiredWithoutAgentsNestedInput
    presences?: PresenceUpdateManyWithoutAgentNestedInput
    agentMatin?: AgentMatinUpdateManyWithoutAgentNestedInput
    agentSoiree?: AgentSoireeUpdateManyWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    PostNom?: StringFieldUpdateOperationsInput | string
    Prenom?: StringFieldUpdateOperationsInput | string
    Matricule?: StringFieldUpdateOperationsInput | string
    Mdp?: StringFieldUpdateOperationsInput | string
    Telehone?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    idDepartement?: IntFieldUpdateOperationsInput | number
    idTitre?: IntFieldUpdateOperationsInput | number
    presences?: PresenceUncheckedUpdateManyWithoutAgentNestedInput
    agentMatin?: AgentMatinUncheckedUpdateManyWithoutAgentNestedInput
    agentSoiree?: AgentSoireeUncheckedUpdateManyWithoutAgentNestedInput
  }

  export type AgentCreateManyInput = {
    id?: number
    Nom: string
    PostNom: string
    Prenom: string
    Matricule: string
    Mdp?: string
    Telehone?: string
    Status?: boolean
    idDepartement: number
    idTitre: number
  }

  export type AgentUpdateManyMutationInput = {
    Nom?: StringFieldUpdateOperationsInput | string
    PostNom?: StringFieldUpdateOperationsInput | string
    Prenom?: StringFieldUpdateOperationsInput | string
    Matricule?: StringFieldUpdateOperationsInput | string
    Mdp?: StringFieldUpdateOperationsInput | string
    Telehone?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AgentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    PostNom?: StringFieldUpdateOperationsInput | string
    Prenom?: StringFieldUpdateOperationsInput | string
    Matricule?: StringFieldUpdateOperationsInput | string
    Mdp?: StringFieldUpdateOperationsInput | string
    Telehone?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    idDepartement?: IntFieldUpdateOperationsInput | number
    idTitre?: IntFieldUpdateOperationsInput | number
  }

  export type PresenceCreateInput = {
    Date: Date | string
    HeureArrivee: Date | string
    HeureSortie: Date | string
    agent: AgentCreateNestedOneWithoutPresencesInput
  }

  export type PresenceUncheckedCreateInput = {
    id?: number
    idAgent: number
    Date: Date | string
    HeureArrivee: Date | string
    HeureSortie: Date | string
  }

  export type PresenceUpdateInput = {
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    HeureArrivee?: DateTimeFieldUpdateOperationsInput | Date | string
    HeureSortie?: DateTimeFieldUpdateOperationsInput | Date | string
    agent?: AgentUpdateOneRequiredWithoutPresencesNestedInput
  }

  export type PresenceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    idAgent?: IntFieldUpdateOperationsInput | number
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    HeureArrivee?: DateTimeFieldUpdateOperationsInput | Date | string
    HeureSortie?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresenceCreateManyInput = {
    id?: number
    idAgent: number
    Date: Date | string
    HeureArrivee: Date | string
    HeureSortie: Date | string
  }

  export type PresenceUpdateManyMutationInput = {
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    HeureArrivee?: DateTimeFieldUpdateOperationsInput | Date | string
    HeureSortie?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresenceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    idAgent?: IntFieldUpdateOperationsInput | number
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    HeureArrivee?: DateTimeFieldUpdateOperationsInput | Date | string
    HeureSortie?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentMatinCreateInput = {
    agent: AgentCreateNestedOneWithoutAgentMatinInput
  }

  export type AgentMatinUncheckedCreateInput = {
    id?: number
    idAgent: number
  }

  export type AgentMatinUpdateInput = {
    agent?: AgentUpdateOneRequiredWithoutAgentMatinNestedInput
  }

  export type AgentMatinUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    idAgent?: IntFieldUpdateOperationsInput | number
  }

  export type AgentMatinCreateManyInput = {
    id?: number
    idAgent: number
  }

  export type AgentMatinUpdateManyMutationInput = {

  }

  export type AgentMatinUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    idAgent?: IntFieldUpdateOperationsInput | number
  }

  export type AgentSoireeCreateInput = {
    agent: AgentCreateNestedOneWithoutAgentSoireeInput
  }

  export type AgentSoireeUncheckedCreateInput = {
    id?: number
    idAgent: number
  }

  export type AgentSoireeUpdateInput = {
    agent?: AgentUpdateOneRequiredWithoutAgentSoireeNestedInput
  }

  export type AgentSoireeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    idAgent?: IntFieldUpdateOperationsInput | number
  }

  export type AgentSoireeCreateManyInput = {
    id?: number
    idAgent: number
  }

  export type AgentSoireeUpdateManyMutationInput = {

  }

  export type AgentSoireeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    idAgent?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type AgentListRelationFilter = {
    every?: AgentWhereInput
    some?: AgentWhereInput
    none?: AgentWhereInput
  }

  export type AgentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartementOrderByRelevanceInput = {
    fields: DepartementOrderByRelevanceFieldEnum | DepartementOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type DepartementCountOrderByAggregateInput = {
    id?: SortOrder
    Nom?: SortOrder
  }

  export type DepartementAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DepartementMaxOrderByAggregateInput = {
    id?: SortOrder
    Nom?: SortOrder
  }

  export type DepartementMinOrderByAggregateInput = {
    id?: SortOrder
    Nom?: SortOrder
  }

  export type DepartementSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type TitreListRelationFilter = {
    every?: TitreWhereInput
    some?: TitreWhereInput
    none?: TitreWhereInput
  }

  export type TitreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SalaireHeureCountOrderByAggregateInput = {
    id?: SortOrder
    Montant?: SortOrder
  }

  export type SalaireHeureAvgOrderByAggregateInput = {
    id?: SortOrder
    Montant?: SortOrder
  }

  export type SalaireHeureMaxOrderByAggregateInput = {
    id?: SortOrder
    Montant?: SortOrder
  }

  export type SalaireHeureMinOrderByAggregateInput = {
    id?: SortOrder
    Montant?: SortOrder
  }

  export type SalaireHeureSumOrderByAggregateInput = {
    id?: SortOrder
    Montant?: SortOrder
  }

  export type SalaireHeureScalarRelationFilter = {
    is?: SalaireHeureWhereInput
    isNot?: SalaireHeureWhereInput
  }

  export type TitreOrderByRelevanceInput = {
    fields: TitreOrderByRelevanceFieldEnum | TitreOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TitreCountOrderByAggregateInput = {
    id?: SortOrder
    Intitule?: SortOrder
    idSalaire?: SortOrder
  }

  export type TitreAvgOrderByAggregateInput = {
    id?: SortOrder
    idSalaire?: SortOrder
  }

  export type TitreMaxOrderByAggregateInput = {
    id?: SortOrder
    Intitule?: SortOrder
    idSalaire?: SortOrder
  }

  export type TitreMinOrderByAggregateInput = {
    id?: SortOrder
    Intitule?: SortOrder
    idSalaire?: SortOrder
  }

  export type TitreSumOrderByAggregateInput = {
    id?: SortOrder
    idSalaire?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DepartementScalarRelationFilter = {
    is?: DepartementWhereInput
    isNot?: DepartementWhereInput
  }

  export type TitreScalarRelationFilter = {
    is?: TitreWhereInput
    isNot?: TitreWhereInput
  }

  export type PresenceListRelationFilter = {
    every?: PresenceWhereInput
    some?: PresenceWhereInput
    none?: PresenceWhereInput
  }

  export type AgentMatinListRelationFilter = {
    every?: AgentMatinWhereInput
    some?: AgentMatinWhereInput
    none?: AgentMatinWhereInput
  }

  export type AgentSoireeListRelationFilter = {
    every?: AgentSoireeWhereInput
    some?: AgentSoireeWhereInput
    none?: AgentSoireeWhereInput
  }

  export type PresenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AgentMatinOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AgentSoireeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AgentOrderByRelevanceInput = {
    fields: AgentOrderByRelevanceFieldEnum | AgentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AgentCountOrderByAggregateInput = {
    id?: SortOrder
    Nom?: SortOrder
    PostNom?: SortOrder
    Prenom?: SortOrder
    Matricule?: SortOrder
    Mdp?: SortOrder
    Telehone?: SortOrder
    Status?: SortOrder
    idDepartement?: SortOrder
    idTitre?: SortOrder
  }

  export type AgentAvgOrderByAggregateInput = {
    id?: SortOrder
    idDepartement?: SortOrder
    idTitre?: SortOrder
  }

  export type AgentMaxOrderByAggregateInput = {
    id?: SortOrder
    Nom?: SortOrder
    PostNom?: SortOrder
    Prenom?: SortOrder
    Matricule?: SortOrder
    Mdp?: SortOrder
    Telehone?: SortOrder
    Status?: SortOrder
    idDepartement?: SortOrder
    idTitre?: SortOrder
  }

  export type AgentMinOrderByAggregateInput = {
    id?: SortOrder
    Nom?: SortOrder
    PostNom?: SortOrder
    Prenom?: SortOrder
    Matricule?: SortOrder
    Mdp?: SortOrder
    Telehone?: SortOrder
    Status?: SortOrder
    idDepartement?: SortOrder
    idTitre?: SortOrder
  }

  export type AgentSumOrderByAggregateInput = {
    id?: SortOrder
    idDepartement?: SortOrder
    idTitre?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AgentScalarRelationFilter = {
    is?: AgentWhereInput
    isNot?: AgentWhereInput
  }

  export type PresenceCountOrderByAggregateInput = {
    id?: SortOrder
    idAgent?: SortOrder
    Date?: SortOrder
    HeureArrivee?: SortOrder
    HeureSortie?: SortOrder
  }

  export type PresenceAvgOrderByAggregateInput = {
    id?: SortOrder
    idAgent?: SortOrder
  }

  export type PresenceMaxOrderByAggregateInput = {
    id?: SortOrder
    idAgent?: SortOrder
    Date?: SortOrder
    HeureArrivee?: SortOrder
    HeureSortie?: SortOrder
  }

  export type PresenceMinOrderByAggregateInput = {
    id?: SortOrder
    idAgent?: SortOrder
    Date?: SortOrder
    HeureArrivee?: SortOrder
    HeureSortie?: SortOrder
  }

  export type PresenceSumOrderByAggregateInput = {
    id?: SortOrder
    idAgent?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type AgentMatinCountOrderByAggregateInput = {
    id?: SortOrder
    idAgent?: SortOrder
  }

  export type AgentMatinAvgOrderByAggregateInput = {
    id?: SortOrder
    idAgent?: SortOrder
  }

  export type AgentMatinMaxOrderByAggregateInput = {
    id?: SortOrder
    idAgent?: SortOrder
  }

  export type AgentMatinMinOrderByAggregateInput = {
    id?: SortOrder
    idAgent?: SortOrder
  }

  export type AgentMatinSumOrderByAggregateInput = {
    id?: SortOrder
    idAgent?: SortOrder
  }

  export type AgentSoireeCountOrderByAggregateInput = {
    id?: SortOrder
    idAgent?: SortOrder
  }

  export type AgentSoireeAvgOrderByAggregateInput = {
    id?: SortOrder
    idAgent?: SortOrder
  }

  export type AgentSoireeMaxOrderByAggregateInput = {
    id?: SortOrder
    idAgent?: SortOrder
  }

  export type AgentSoireeMinOrderByAggregateInput = {
    id?: SortOrder
    idAgent?: SortOrder
  }

  export type AgentSoireeSumOrderByAggregateInput = {
    id?: SortOrder
    idAgent?: SortOrder
  }

  export type AgentCreateNestedManyWithoutDepartementInput = {
    create?: XOR<AgentCreateWithoutDepartementInput, AgentUncheckedCreateWithoutDepartementInput> | AgentCreateWithoutDepartementInput[] | AgentUncheckedCreateWithoutDepartementInput[]
    connectOrCreate?: AgentCreateOrConnectWithoutDepartementInput | AgentCreateOrConnectWithoutDepartementInput[]
    createMany?: AgentCreateManyDepartementInputEnvelope
    connect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
  }

  export type AgentUncheckedCreateNestedManyWithoutDepartementInput = {
    create?: XOR<AgentCreateWithoutDepartementInput, AgentUncheckedCreateWithoutDepartementInput> | AgentCreateWithoutDepartementInput[] | AgentUncheckedCreateWithoutDepartementInput[]
    connectOrCreate?: AgentCreateOrConnectWithoutDepartementInput | AgentCreateOrConnectWithoutDepartementInput[]
    createMany?: AgentCreateManyDepartementInputEnvelope
    connect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type AgentUpdateManyWithoutDepartementNestedInput = {
    create?: XOR<AgentCreateWithoutDepartementInput, AgentUncheckedCreateWithoutDepartementInput> | AgentCreateWithoutDepartementInput[] | AgentUncheckedCreateWithoutDepartementInput[]
    connectOrCreate?: AgentCreateOrConnectWithoutDepartementInput | AgentCreateOrConnectWithoutDepartementInput[]
    upsert?: AgentUpsertWithWhereUniqueWithoutDepartementInput | AgentUpsertWithWhereUniqueWithoutDepartementInput[]
    createMany?: AgentCreateManyDepartementInputEnvelope
    set?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    disconnect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    delete?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    connect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    update?: AgentUpdateWithWhereUniqueWithoutDepartementInput | AgentUpdateWithWhereUniqueWithoutDepartementInput[]
    updateMany?: AgentUpdateManyWithWhereWithoutDepartementInput | AgentUpdateManyWithWhereWithoutDepartementInput[]
    deleteMany?: AgentScalarWhereInput | AgentScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AgentUncheckedUpdateManyWithoutDepartementNestedInput = {
    create?: XOR<AgentCreateWithoutDepartementInput, AgentUncheckedCreateWithoutDepartementInput> | AgentCreateWithoutDepartementInput[] | AgentUncheckedCreateWithoutDepartementInput[]
    connectOrCreate?: AgentCreateOrConnectWithoutDepartementInput | AgentCreateOrConnectWithoutDepartementInput[]
    upsert?: AgentUpsertWithWhereUniqueWithoutDepartementInput | AgentUpsertWithWhereUniqueWithoutDepartementInput[]
    createMany?: AgentCreateManyDepartementInputEnvelope
    set?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    disconnect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    delete?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    connect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    update?: AgentUpdateWithWhereUniqueWithoutDepartementInput | AgentUpdateWithWhereUniqueWithoutDepartementInput[]
    updateMany?: AgentUpdateManyWithWhereWithoutDepartementInput | AgentUpdateManyWithWhereWithoutDepartementInput[]
    deleteMany?: AgentScalarWhereInput | AgentScalarWhereInput[]
  }

  export type TitreCreateNestedManyWithoutSalaireInput = {
    create?: XOR<TitreCreateWithoutSalaireInput, TitreUncheckedCreateWithoutSalaireInput> | TitreCreateWithoutSalaireInput[] | TitreUncheckedCreateWithoutSalaireInput[]
    connectOrCreate?: TitreCreateOrConnectWithoutSalaireInput | TitreCreateOrConnectWithoutSalaireInput[]
    createMany?: TitreCreateManySalaireInputEnvelope
    connect?: TitreWhereUniqueInput | TitreWhereUniqueInput[]
  }

  export type TitreUncheckedCreateNestedManyWithoutSalaireInput = {
    create?: XOR<TitreCreateWithoutSalaireInput, TitreUncheckedCreateWithoutSalaireInput> | TitreCreateWithoutSalaireInput[] | TitreUncheckedCreateWithoutSalaireInput[]
    connectOrCreate?: TitreCreateOrConnectWithoutSalaireInput | TitreCreateOrConnectWithoutSalaireInput[]
    createMany?: TitreCreateManySalaireInputEnvelope
    connect?: TitreWhereUniqueInput | TitreWhereUniqueInput[]
  }

  export type TitreUpdateManyWithoutSalaireNestedInput = {
    create?: XOR<TitreCreateWithoutSalaireInput, TitreUncheckedCreateWithoutSalaireInput> | TitreCreateWithoutSalaireInput[] | TitreUncheckedCreateWithoutSalaireInput[]
    connectOrCreate?: TitreCreateOrConnectWithoutSalaireInput | TitreCreateOrConnectWithoutSalaireInput[]
    upsert?: TitreUpsertWithWhereUniqueWithoutSalaireInput | TitreUpsertWithWhereUniqueWithoutSalaireInput[]
    createMany?: TitreCreateManySalaireInputEnvelope
    set?: TitreWhereUniqueInput | TitreWhereUniqueInput[]
    disconnect?: TitreWhereUniqueInput | TitreWhereUniqueInput[]
    delete?: TitreWhereUniqueInput | TitreWhereUniqueInput[]
    connect?: TitreWhereUniqueInput | TitreWhereUniqueInput[]
    update?: TitreUpdateWithWhereUniqueWithoutSalaireInput | TitreUpdateWithWhereUniqueWithoutSalaireInput[]
    updateMany?: TitreUpdateManyWithWhereWithoutSalaireInput | TitreUpdateManyWithWhereWithoutSalaireInput[]
    deleteMany?: TitreScalarWhereInput | TitreScalarWhereInput[]
  }

  export type TitreUncheckedUpdateManyWithoutSalaireNestedInput = {
    create?: XOR<TitreCreateWithoutSalaireInput, TitreUncheckedCreateWithoutSalaireInput> | TitreCreateWithoutSalaireInput[] | TitreUncheckedCreateWithoutSalaireInput[]
    connectOrCreate?: TitreCreateOrConnectWithoutSalaireInput | TitreCreateOrConnectWithoutSalaireInput[]
    upsert?: TitreUpsertWithWhereUniqueWithoutSalaireInput | TitreUpsertWithWhereUniqueWithoutSalaireInput[]
    createMany?: TitreCreateManySalaireInputEnvelope
    set?: TitreWhereUniqueInput | TitreWhereUniqueInput[]
    disconnect?: TitreWhereUniqueInput | TitreWhereUniqueInput[]
    delete?: TitreWhereUniqueInput | TitreWhereUniqueInput[]
    connect?: TitreWhereUniqueInput | TitreWhereUniqueInput[]
    update?: TitreUpdateWithWhereUniqueWithoutSalaireInput | TitreUpdateWithWhereUniqueWithoutSalaireInput[]
    updateMany?: TitreUpdateManyWithWhereWithoutSalaireInput | TitreUpdateManyWithWhereWithoutSalaireInput[]
    deleteMany?: TitreScalarWhereInput | TitreScalarWhereInput[]
  }

  export type SalaireHeureCreateNestedOneWithoutTitresInput = {
    create?: XOR<SalaireHeureCreateWithoutTitresInput, SalaireHeureUncheckedCreateWithoutTitresInput>
    connectOrCreate?: SalaireHeureCreateOrConnectWithoutTitresInput
    connect?: SalaireHeureWhereUniqueInput
  }

  export type AgentCreateNestedManyWithoutTitreInput = {
    create?: XOR<AgentCreateWithoutTitreInput, AgentUncheckedCreateWithoutTitreInput> | AgentCreateWithoutTitreInput[] | AgentUncheckedCreateWithoutTitreInput[]
    connectOrCreate?: AgentCreateOrConnectWithoutTitreInput | AgentCreateOrConnectWithoutTitreInput[]
    createMany?: AgentCreateManyTitreInputEnvelope
    connect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
  }

  export type AgentUncheckedCreateNestedManyWithoutTitreInput = {
    create?: XOR<AgentCreateWithoutTitreInput, AgentUncheckedCreateWithoutTitreInput> | AgentCreateWithoutTitreInput[] | AgentUncheckedCreateWithoutTitreInput[]
    connectOrCreate?: AgentCreateOrConnectWithoutTitreInput | AgentCreateOrConnectWithoutTitreInput[]
    createMany?: AgentCreateManyTitreInputEnvelope
    connect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
  }

  export type SalaireHeureUpdateOneRequiredWithoutTitresNestedInput = {
    create?: XOR<SalaireHeureCreateWithoutTitresInput, SalaireHeureUncheckedCreateWithoutTitresInput>
    connectOrCreate?: SalaireHeureCreateOrConnectWithoutTitresInput
    upsert?: SalaireHeureUpsertWithoutTitresInput
    connect?: SalaireHeureWhereUniqueInput
    update?: XOR<XOR<SalaireHeureUpdateToOneWithWhereWithoutTitresInput, SalaireHeureUpdateWithoutTitresInput>, SalaireHeureUncheckedUpdateWithoutTitresInput>
  }

  export type AgentUpdateManyWithoutTitreNestedInput = {
    create?: XOR<AgentCreateWithoutTitreInput, AgentUncheckedCreateWithoutTitreInput> | AgentCreateWithoutTitreInput[] | AgentUncheckedCreateWithoutTitreInput[]
    connectOrCreate?: AgentCreateOrConnectWithoutTitreInput | AgentCreateOrConnectWithoutTitreInput[]
    upsert?: AgentUpsertWithWhereUniqueWithoutTitreInput | AgentUpsertWithWhereUniqueWithoutTitreInput[]
    createMany?: AgentCreateManyTitreInputEnvelope
    set?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    disconnect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    delete?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    connect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    update?: AgentUpdateWithWhereUniqueWithoutTitreInput | AgentUpdateWithWhereUniqueWithoutTitreInput[]
    updateMany?: AgentUpdateManyWithWhereWithoutTitreInput | AgentUpdateManyWithWhereWithoutTitreInput[]
    deleteMany?: AgentScalarWhereInput | AgentScalarWhereInput[]
  }

  export type AgentUncheckedUpdateManyWithoutTitreNestedInput = {
    create?: XOR<AgentCreateWithoutTitreInput, AgentUncheckedCreateWithoutTitreInput> | AgentCreateWithoutTitreInput[] | AgentUncheckedCreateWithoutTitreInput[]
    connectOrCreate?: AgentCreateOrConnectWithoutTitreInput | AgentCreateOrConnectWithoutTitreInput[]
    upsert?: AgentUpsertWithWhereUniqueWithoutTitreInput | AgentUpsertWithWhereUniqueWithoutTitreInput[]
    createMany?: AgentCreateManyTitreInputEnvelope
    set?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    disconnect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    delete?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    connect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    update?: AgentUpdateWithWhereUniqueWithoutTitreInput | AgentUpdateWithWhereUniqueWithoutTitreInput[]
    updateMany?: AgentUpdateManyWithWhereWithoutTitreInput | AgentUpdateManyWithWhereWithoutTitreInput[]
    deleteMany?: AgentScalarWhereInput | AgentScalarWhereInput[]
  }

  export type DepartementCreateNestedOneWithoutAgentsInput = {
    create?: XOR<DepartementCreateWithoutAgentsInput, DepartementUncheckedCreateWithoutAgentsInput>
    connectOrCreate?: DepartementCreateOrConnectWithoutAgentsInput
    connect?: DepartementWhereUniqueInput
  }

  export type TitreCreateNestedOneWithoutAgentsInput = {
    create?: XOR<TitreCreateWithoutAgentsInput, TitreUncheckedCreateWithoutAgentsInput>
    connectOrCreate?: TitreCreateOrConnectWithoutAgentsInput
    connect?: TitreWhereUniqueInput
  }

  export type PresenceCreateNestedManyWithoutAgentInput = {
    create?: XOR<PresenceCreateWithoutAgentInput, PresenceUncheckedCreateWithoutAgentInput> | PresenceCreateWithoutAgentInput[] | PresenceUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutAgentInput | PresenceCreateOrConnectWithoutAgentInput[]
    createMany?: PresenceCreateManyAgentInputEnvelope
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
  }

  export type AgentMatinCreateNestedManyWithoutAgentInput = {
    create?: XOR<AgentMatinCreateWithoutAgentInput, AgentMatinUncheckedCreateWithoutAgentInput> | AgentMatinCreateWithoutAgentInput[] | AgentMatinUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: AgentMatinCreateOrConnectWithoutAgentInput | AgentMatinCreateOrConnectWithoutAgentInput[]
    createMany?: AgentMatinCreateManyAgentInputEnvelope
    connect?: AgentMatinWhereUniqueInput | AgentMatinWhereUniqueInput[]
  }

  export type AgentSoireeCreateNestedManyWithoutAgentInput = {
    create?: XOR<AgentSoireeCreateWithoutAgentInput, AgentSoireeUncheckedCreateWithoutAgentInput> | AgentSoireeCreateWithoutAgentInput[] | AgentSoireeUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: AgentSoireeCreateOrConnectWithoutAgentInput | AgentSoireeCreateOrConnectWithoutAgentInput[]
    createMany?: AgentSoireeCreateManyAgentInputEnvelope
    connect?: AgentSoireeWhereUniqueInput | AgentSoireeWhereUniqueInput[]
  }

  export type PresenceUncheckedCreateNestedManyWithoutAgentInput = {
    create?: XOR<PresenceCreateWithoutAgentInput, PresenceUncheckedCreateWithoutAgentInput> | PresenceCreateWithoutAgentInput[] | PresenceUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutAgentInput | PresenceCreateOrConnectWithoutAgentInput[]
    createMany?: PresenceCreateManyAgentInputEnvelope
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
  }

  export type AgentMatinUncheckedCreateNestedManyWithoutAgentInput = {
    create?: XOR<AgentMatinCreateWithoutAgentInput, AgentMatinUncheckedCreateWithoutAgentInput> | AgentMatinCreateWithoutAgentInput[] | AgentMatinUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: AgentMatinCreateOrConnectWithoutAgentInput | AgentMatinCreateOrConnectWithoutAgentInput[]
    createMany?: AgentMatinCreateManyAgentInputEnvelope
    connect?: AgentMatinWhereUniqueInput | AgentMatinWhereUniqueInput[]
  }

  export type AgentSoireeUncheckedCreateNestedManyWithoutAgentInput = {
    create?: XOR<AgentSoireeCreateWithoutAgentInput, AgentSoireeUncheckedCreateWithoutAgentInput> | AgentSoireeCreateWithoutAgentInput[] | AgentSoireeUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: AgentSoireeCreateOrConnectWithoutAgentInput | AgentSoireeCreateOrConnectWithoutAgentInput[]
    createMany?: AgentSoireeCreateManyAgentInputEnvelope
    connect?: AgentSoireeWhereUniqueInput | AgentSoireeWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DepartementUpdateOneRequiredWithoutAgentsNestedInput = {
    create?: XOR<DepartementCreateWithoutAgentsInput, DepartementUncheckedCreateWithoutAgentsInput>
    connectOrCreate?: DepartementCreateOrConnectWithoutAgentsInput
    upsert?: DepartementUpsertWithoutAgentsInput
    connect?: DepartementWhereUniqueInput
    update?: XOR<XOR<DepartementUpdateToOneWithWhereWithoutAgentsInput, DepartementUpdateWithoutAgentsInput>, DepartementUncheckedUpdateWithoutAgentsInput>
  }

  export type TitreUpdateOneRequiredWithoutAgentsNestedInput = {
    create?: XOR<TitreCreateWithoutAgentsInput, TitreUncheckedCreateWithoutAgentsInput>
    connectOrCreate?: TitreCreateOrConnectWithoutAgentsInput
    upsert?: TitreUpsertWithoutAgentsInput
    connect?: TitreWhereUniqueInput
    update?: XOR<XOR<TitreUpdateToOneWithWhereWithoutAgentsInput, TitreUpdateWithoutAgentsInput>, TitreUncheckedUpdateWithoutAgentsInput>
  }

  export type PresenceUpdateManyWithoutAgentNestedInput = {
    create?: XOR<PresenceCreateWithoutAgentInput, PresenceUncheckedCreateWithoutAgentInput> | PresenceCreateWithoutAgentInput[] | PresenceUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutAgentInput | PresenceCreateOrConnectWithoutAgentInput[]
    upsert?: PresenceUpsertWithWhereUniqueWithoutAgentInput | PresenceUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: PresenceCreateManyAgentInputEnvelope
    set?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    disconnect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    delete?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    update?: PresenceUpdateWithWhereUniqueWithoutAgentInput | PresenceUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: PresenceUpdateManyWithWhereWithoutAgentInput | PresenceUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: PresenceScalarWhereInput | PresenceScalarWhereInput[]
  }

  export type AgentMatinUpdateManyWithoutAgentNestedInput = {
    create?: XOR<AgentMatinCreateWithoutAgentInput, AgentMatinUncheckedCreateWithoutAgentInput> | AgentMatinCreateWithoutAgentInput[] | AgentMatinUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: AgentMatinCreateOrConnectWithoutAgentInput | AgentMatinCreateOrConnectWithoutAgentInput[]
    upsert?: AgentMatinUpsertWithWhereUniqueWithoutAgentInput | AgentMatinUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: AgentMatinCreateManyAgentInputEnvelope
    set?: AgentMatinWhereUniqueInput | AgentMatinWhereUniqueInput[]
    disconnect?: AgentMatinWhereUniqueInput | AgentMatinWhereUniqueInput[]
    delete?: AgentMatinWhereUniqueInput | AgentMatinWhereUniqueInput[]
    connect?: AgentMatinWhereUniqueInput | AgentMatinWhereUniqueInput[]
    update?: AgentMatinUpdateWithWhereUniqueWithoutAgentInput | AgentMatinUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: AgentMatinUpdateManyWithWhereWithoutAgentInput | AgentMatinUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: AgentMatinScalarWhereInput | AgentMatinScalarWhereInput[]
  }

  export type AgentSoireeUpdateManyWithoutAgentNestedInput = {
    create?: XOR<AgentSoireeCreateWithoutAgentInput, AgentSoireeUncheckedCreateWithoutAgentInput> | AgentSoireeCreateWithoutAgentInput[] | AgentSoireeUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: AgentSoireeCreateOrConnectWithoutAgentInput | AgentSoireeCreateOrConnectWithoutAgentInput[]
    upsert?: AgentSoireeUpsertWithWhereUniqueWithoutAgentInput | AgentSoireeUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: AgentSoireeCreateManyAgentInputEnvelope
    set?: AgentSoireeWhereUniqueInput | AgentSoireeWhereUniqueInput[]
    disconnect?: AgentSoireeWhereUniqueInput | AgentSoireeWhereUniqueInput[]
    delete?: AgentSoireeWhereUniqueInput | AgentSoireeWhereUniqueInput[]
    connect?: AgentSoireeWhereUniqueInput | AgentSoireeWhereUniqueInput[]
    update?: AgentSoireeUpdateWithWhereUniqueWithoutAgentInput | AgentSoireeUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: AgentSoireeUpdateManyWithWhereWithoutAgentInput | AgentSoireeUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: AgentSoireeScalarWhereInput | AgentSoireeScalarWhereInput[]
  }

  export type PresenceUncheckedUpdateManyWithoutAgentNestedInput = {
    create?: XOR<PresenceCreateWithoutAgentInput, PresenceUncheckedCreateWithoutAgentInput> | PresenceCreateWithoutAgentInput[] | PresenceUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutAgentInput | PresenceCreateOrConnectWithoutAgentInput[]
    upsert?: PresenceUpsertWithWhereUniqueWithoutAgentInput | PresenceUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: PresenceCreateManyAgentInputEnvelope
    set?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    disconnect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    delete?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    update?: PresenceUpdateWithWhereUniqueWithoutAgentInput | PresenceUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: PresenceUpdateManyWithWhereWithoutAgentInput | PresenceUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: PresenceScalarWhereInput | PresenceScalarWhereInput[]
  }

  export type AgentMatinUncheckedUpdateManyWithoutAgentNestedInput = {
    create?: XOR<AgentMatinCreateWithoutAgentInput, AgentMatinUncheckedCreateWithoutAgentInput> | AgentMatinCreateWithoutAgentInput[] | AgentMatinUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: AgentMatinCreateOrConnectWithoutAgentInput | AgentMatinCreateOrConnectWithoutAgentInput[]
    upsert?: AgentMatinUpsertWithWhereUniqueWithoutAgentInput | AgentMatinUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: AgentMatinCreateManyAgentInputEnvelope
    set?: AgentMatinWhereUniqueInput | AgentMatinWhereUniqueInput[]
    disconnect?: AgentMatinWhereUniqueInput | AgentMatinWhereUniqueInput[]
    delete?: AgentMatinWhereUniqueInput | AgentMatinWhereUniqueInput[]
    connect?: AgentMatinWhereUniqueInput | AgentMatinWhereUniqueInput[]
    update?: AgentMatinUpdateWithWhereUniqueWithoutAgentInput | AgentMatinUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: AgentMatinUpdateManyWithWhereWithoutAgentInput | AgentMatinUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: AgentMatinScalarWhereInput | AgentMatinScalarWhereInput[]
  }

  export type AgentSoireeUncheckedUpdateManyWithoutAgentNestedInput = {
    create?: XOR<AgentSoireeCreateWithoutAgentInput, AgentSoireeUncheckedCreateWithoutAgentInput> | AgentSoireeCreateWithoutAgentInput[] | AgentSoireeUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: AgentSoireeCreateOrConnectWithoutAgentInput | AgentSoireeCreateOrConnectWithoutAgentInput[]
    upsert?: AgentSoireeUpsertWithWhereUniqueWithoutAgentInput | AgentSoireeUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: AgentSoireeCreateManyAgentInputEnvelope
    set?: AgentSoireeWhereUniqueInput | AgentSoireeWhereUniqueInput[]
    disconnect?: AgentSoireeWhereUniqueInput | AgentSoireeWhereUniqueInput[]
    delete?: AgentSoireeWhereUniqueInput | AgentSoireeWhereUniqueInput[]
    connect?: AgentSoireeWhereUniqueInput | AgentSoireeWhereUniqueInput[]
    update?: AgentSoireeUpdateWithWhereUniqueWithoutAgentInput | AgentSoireeUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: AgentSoireeUpdateManyWithWhereWithoutAgentInput | AgentSoireeUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: AgentSoireeScalarWhereInput | AgentSoireeScalarWhereInput[]
  }

  export type AgentCreateNestedOneWithoutPresencesInput = {
    create?: XOR<AgentCreateWithoutPresencesInput, AgentUncheckedCreateWithoutPresencesInput>
    connectOrCreate?: AgentCreateOrConnectWithoutPresencesInput
    connect?: AgentWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AgentUpdateOneRequiredWithoutPresencesNestedInput = {
    create?: XOR<AgentCreateWithoutPresencesInput, AgentUncheckedCreateWithoutPresencesInput>
    connectOrCreate?: AgentCreateOrConnectWithoutPresencesInput
    upsert?: AgentUpsertWithoutPresencesInput
    connect?: AgentWhereUniqueInput
    update?: XOR<XOR<AgentUpdateToOneWithWhereWithoutPresencesInput, AgentUpdateWithoutPresencesInput>, AgentUncheckedUpdateWithoutPresencesInput>
  }

  export type AgentCreateNestedOneWithoutAgentMatinInput = {
    create?: XOR<AgentCreateWithoutAgentMatinInput, AgentUncheckedCreateWithoutAgentMatinInput>
    connectOrCreate?: AgentCreateOrConnectWithoutAgentMatinInput
    connect?: AgentWhereUniqueInput
  }

  export type AgentUpdateOneRequiredWithoutAgentMatinNestedInput = {
    create?: XOR<AgentCreateWithoutAgentMatinInput, AgentUncheckedCreateWithoutAgentMatinInput>
    connectOrCreate?: AgentCreateOrConnectWithoutAgentMatinInput
    upsert?: AgentUpsertWithoutAgentMatinInput
    connect?: AgentWhereUniqueInput
    update?: XOR<XOR<AgentUpdateToOneWithWhereWithoutAgentMatinInput, AgentUpdateWithoutAgentMatinInput>, AgentUncheckedUpdateWithoutAgentMatinInput>
  }

  export type AgentCreateNestedOneWithoutAgentSoireeInput = {
    create?: XOR<AgentCreateWithoutAgentSoireeInput, AgentUncheckedCreateWithoutAgentSoireeInput>
    connectOrCreate?: AgentCreateOrConnectWithoutAgentSoireeInput
    connect?: AgentWhereUniqueInput
  }

  export type AgentUpdateOneRequiredWithoutAgentSoireeNestedInput = {
    create?: XOR<AgentCreateWithoutAgentSoireeInput, AgentUncheckedCreateWithoutAgentSoireeInput>
    connectOrCreate?: AgentCreateOrConnectWithoutAgentSoireeInput
    upsert?: AgentUpsertWithoutAgentSoireeInput
    connect?: AgentWhereUniqueInput
    update?: XOR<XOR<AgentUpdateToOneWithWhereWithoutAgentSoireeInput, AgentUpdateWithoutAgentSoireeInput>, AgentUncheckedUpdateWithoutAgentSoireeInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type AgentCreateWithoutDepartementInput = {
    Nom: string
    PostNom: string
    Prenom: string
    Matricule: string
    Mdp?: string
    Telehone?: string
    Status?: boolean
    titre: TitreCreateNestedOneWithoutAgentsInput
    presences?: PresenceCreateNestedManyWithoutAgentInput
    agentMatin?: AgentMatinCreateNestedManyWithoutAgentInput
    agentSoiree?: AgentSoireeCreateNestedManyWithoutAgentInput
  }

  export type AgentUncheckedCreateWithoutDepartementInput = {
    id?: number
    Nom: string
    PostNom: string
    Prenom: string
    Matricule: string
    Mdp?: string
    Telehone?: string
    Status?: boolean
    idTitre: number
    presences?: PresenceUncheckedCreateNestedManyWithoutAgentInput
    agentMatin?: AgentMatinUncheckedCreateNestedManyWithoutAgentInput
    agentSoiree?: AgentSoireeUncheckedCreateNestedManyWithoutAgentInput
  }

  export type AgentCreateOrConnectWithoutDepartementInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutDepartementInput, AgentUncheckedCreateWithoutDepartementInput>
  }

  export type AgentCreateManyDepartementInputEnvelope = {
    data: AgentCreateManyDepartementInput | AgentCreateManyDepartementInput[]
    skipDuplicates?: boolean
  }

  export type AgentUpsertWithWhereUniqueWithoutDepartementInput = {
    where: AgentWhereUniqueInput
    update: XOR<AgentUpdateWithoutDepartementInput, AgentUncheckedUpdateWithoutDepartementInput>
    create: XOR<AgentCreateWithoutDepartementInput, AgentUncheckedCreateWithoutDepartementInput>
  }

  export type AgentUpdateWithWhereUniqueWithoutDepartementInput = {
    where: AgentWhereUniqueInput
    data: XOR<AgentUpdateWithoutDepartementInput, AgentUncheckedUpdateWithoutDepartementInput>
  }

  export type AgentUpdateManyWithWhereWithoutDepartementInput = {
    where: AgentScalarWhereInput
    data: XOR<AgentUpdateManyMutationInput, AgentUncheckedUpdateManyWithoutDepartementInput>
  }

  export type AgentScalarWhereInput = {
    AND?: AgentScalarWhereInput | AgentScalarWhereInput[]
    OR?: AgentScalarWhereInput[]
    NOT?: AgentScalarWhereInput | AgentScalarWhereInput[]
    id?: IntFilter<"Agent"> | number
    Nom?: StringFilter<"Agent"> | string
    PostNom?: StringFilter<"Agent"> | string
    Prenom?: StringFilter<"Agent"> | string
    Matricule?: StringFilter<"Agent"> | string
    Mdp?: StringFilter<"Agent"> | string
    Telehone?: StringFilter<"Agent"> | string
    Status?: BoolFilter<"Agent"> | boolean
    idDepartement?: IntFilter<"Agent"> | number
    idTitre?: IntFilter<"Agent"> | number
  }

  export type TitreCreateWithoutSalaireInput = {
    Intitule: string
    agents?: AgentCreateNestedManyWithoutTitreInput
  }

  export type TitreUncheckedCreateWithoutSalaireInput = {
    id?: number
    Intitule: string
    agents?: AgentUncheckedCreateNestedManyWithoutTitreInput
  }

  export type TitreCreateOrConnectWithoutSalaireInput = {
    where: TitreWhereUniqueInput
    create: XOR<TitreCreateWithoutSalaireInput, TitreUncheckedCreateWithoutSalaireInput>
  }

  export type TitreCreateManySalaireInputEnvelope = {
    data: TitreCreateManySalaireInput | TitreCreateManySalaireInput[]
    skipDuplicates?: boolean
  }

  export type TitreUpsertWithWhereUniqueWithoutSalaireInput = {
    where: TitreWhereUniqueInput
    update: XOR<TitreUpdateWithoutSalaireInput, TitreUncheckedUpdateWithoutSalaireInput>
    create: XOR<TitreCreateWithoutSalaireInput, TitreUncheckedCreateWithoutSalaireInput>
  }

  export type TitreUpdateWithWhereUniqueWithoutSalaireInput = {
    where: TitreWhereUniqueInput
    data: XOR<TitreUpdateWithoutSalaireInput, TitreUncheckedUpdateWithoutSalaireInput>
  }

  export type TitreUpdateManyWithWhereWithoutSalaireInput = {
    where: TitreScalarWhereInput
    data: XOR<TitreUpdateManyMutationInput, TitreUncheckedUpdateManyWithoutSalaireInput>
  }

  export type TitreScalarWhereInput = {
    AND?: TitreScalarWhereInput | TitreScalarWhereInput[]
    OR?: TitreScalarWhereInput[]
    NOT?: TitreScalarWhereInput | TitreScalarWhereInput[]
    id?: IntFilter<"Titre"> | number
    Intitule?: StringFilter<"Titre"> | string
    idSalaire?: IntFilter<"Titre"> | number
  }

  export type SalaireHeureCreateWithoutTitresInput = {
    Montant: number
  }

  export type SalaireHeureUncheckedCreateWithoutTitresInput = {
    id?: number
    Montant: number
  }

  export type SalaireHeureCreateOrConnectWithoutTitresInput = {
    where: SalaireHeureWhereUniqueInput
    create: XOR<SalaireHeureCreateWithoutTitresInput, SalaireHeureUncheckedCreateWithoutTitresInput>
  }

  export type AgentCreateWithoutTitreInput = {
    Nom: string
    PostNom: string
    Prenom: string
    Matricule: string
    Mdp?: string
    Telehone?: string
    Status?: boolean
    departement: DepartementCreateNestedOneWithoutAgentsInput
    presences?: PresenceCreateNestedManyWithoutAgentInput
    agentMatin?: AgentMatinCreateNestedManyWithoutAgentInput
    agentSoiree?: AgentSoireeCreateNestedManyWithoutAgentInput
  }

  export type AgentUncheckedCreateWithoutTitreInput = {
    id?: number
    Nom: string
    PostNom: string
    Prenom: string
    Matricule: string
    Mdp?: string
    Telehone?: string
    Status?: boolean
    idDepartement: number
    presences?: PresenceUncheckedCreateNestedManyWithoutAgentInput
    agentMatin?: AgentMatinUncheckedCreateNestedManyWithoutAgentInput
    agentSoiree?: AgentSoireeUncheckedCreateNestedManyWithoutAgentInput
  }

  export type AgentCreateOrConnectWithoutTitreInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutTitreInput, AgentUncheckedCreateWithoutTitreInput>
  }

  export type AgentCreateManyTitreInputEnvelope = {
    data: AgentCreateManyTitreInput | AgentCreateManyTitreInput[]
    skipDuplicates?: boolean
  }

  export type SalaireHeureUpsertWithoutTitresInput = {
    update: XOR<SalaireHeureUpdateWithoutTitresInput, SalaireHeureUncheckedUpdateWithoutTitresInput>
    create: XOR<SalaireHeureCreateWithoutTitresInput, SalaireHeureUncheckedCreateWithoutTitresInput>
    where?: SalaireHeureWhereInput
  }

  export type SalaireHeureUpdateToOneWithWhereWithoutTitresInput = {
    where?: SalaireHeureWhereInput
    data: XOR<SalaireHeureUpdateWithoutTitresInput, SalaireHeureUncheckedUpdateWithoutTitresInput>
  }

  export type SalaireHeureUpdateWithoutTitresInput = {
    Montant?: IntFieldUpdateOperationsInput | number
  }

  export type SalaireHeureUncheckedUpdateWithoutTitresInput = {
    id?: IntFieldUpdateOperationsInput | number
    Montant?: IntFieldUpdateOperationsInput | number
  }

  export type AgentUpsertWithWhereUniqueWithoutTitreInput = {
    where: AgentWhereUniqueInput
    update: XOR<AgentUpdateWithoutTitreInput, AgentUncheckedUpdateWithoutTitreInput>
    create: XOR<AgentCreateWithoutTitreInput, AgentUncheckedCreateWithoutTitreInput>
  }

  export type AgentUpdateWithWhereUniqueWithoutTitreInput = {
    where: AgentWhereUniqueInput
    data: XOR<AgentUpdateWithoutTitreInput, AgentUncheckedUpdateWithoutTitreInput>
  }

  export type AgentUpdateManyWithWhereWithoutTitreInput = {
    where: AgentScalarWhereInput
    data: XOR<AgentUpdateManyMutationInput, AgentUncheckedUpdateManyWithoutTitreInput>
  }

  export type DepartementCreateWithoutAgentsInput = {
    Nom: string
  }

  export type DepartementUncheckedCreateWithoutAgentsInput = {
    id?: number
    Nom: string
  }

  export type DepartementCreateOrConnectWithoutAgentsInput = {
    where: DepartementWhereUniqueInput
    create: XOR<DepartementCreateWithoutAgentsInput, DepartementUncheckedCreateWithoutAgentsInput>
  }

  export type TitreCreateWithoutAgentsInput = {
    Intitule: string
    salaire: SalaireHeureCreateNestedOneWithoutTitresInput
  }

  export type TitreUncheckedCreateWithoutAgentsInput = {
    id?: number
    Intitule: string
    idSalaire: number
  }

  export type TitreCreateOrConnectWithoutAgentsInput = {
    where: TitreWhereUniqueInput
    create: XOR<TitreCreateWithoutAgentsInput, TitreUncheckedCreateWithoutAgentsInput>
  }

  export type PresenceCreateWithoutAgentInput = {
    Date: Date | string
    HeureArrivee: Date | string
    HeureSortie: Date | string
  }

  export type PresenceUncheckedCreateWithoutAgentInput = {
    id?: number
    Date: Date | string
    HeureArrivee: Date | string
    HeureSortie: Date | string
  }

  export type PresenceCreateOrConnectWithoutAgentInput = {
    where: PresenceWhereUniqueInput
    create: XOR<PresenceCreateWithoutAgentInput, PresenceUncheckedCreateWithoutAgentInput>
  }

  export type PresenceCreateManyAgentInputEnvelope = {
    data: PresenceCreateManyAgentInput | PresenceCreateManyAgentInput[]
    skipDuplicates?: boolean
  }

  export type AgentMatinCreateWithoutAgentInput = {

  }

  export type AgentMatinUncheckedCreateWithoutAgentInput = {
    id?: number
  }

  export type AgentMatinCreateOrConnectWithoutAgentInput = {
    where: AgentMatinWhereUniqueInput
    create: XOR<AgentMatinCreateWithoutAgentInput, AgentMatinUncheckedCreateWithoutAgentInput>
  }

  export type AgentMatinCreateManyAgentInputEnvelope = {
    data: AgentMatinCreateManyAgentInput | AgentMatinCreateManyAgentInput[]
    skipDuplicates?: boolean
  }

  export type AgentSoireeCreateWithoutAgentInput = {

  }

  export type AgentSoireeUncheckedCreateWithoutAgentInput = {
    id?: number
  }

  export type AgentSoireeCreateOrConnectWithoutAgentInput = {
    where: AgentSoireeWhereUniqueInput
    create: XOR<AgentSoireeCreateWithoutAgentInput, AgentSoireeUncheckedCreateWithoutAgentInput>
  }

  export type AgentSoireeCreateManyAgentInputEnvelope = {
    data: AgentSoireeCreateManyAgentInput | AgentSoireeCreateManyAgentInput[]
    skipDuplicates?: boolean
  }

  export type DepartementUpsertWithoutAgentsInput = {
    update: XOR<DepartementUpdateWithoutAgentsInput, DepartementUncheckedUpdateWithoutAgentsInput>
    create: XOR<DepartementCreateWithoutAgentsInput, DepartementUncheckedCreateWithoutAgentsInput>
    where?: DepartementWhereInput
  }

  export type DepartementUpdateToOneWithWhereWithoutAgentsInput = {
    where?: DepartementWhereInput
    data: XOR<DepartementUpdateWithoutAgentsInput, DepartementUncheckedUpdateWithoutAgentsInput>
  }

  export type DepartementUpdateWithoutAgentsInput = {
    Nom?: StringFieldUpdateOperationsInput | string
  }

  export type DepartementUncheckedUpdateWithoutAgentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
  }

  export type TitreUpsertWithoutAgentsInput = {
    update: XOR<TitreUpdateWithoutAgentsInput, TitreUncheckedUpdateWithoutAgentsInput>
    create: XOR<TitreCreateWithoutAgentsInput, TitreUncheckedCreateWithoutAgentsInput>
    where?: TitreWhereInput
  }

  export type TitreUpdateToOneWithWhereWithoutAgentsInput = {
    where?: TitreWhereInput
    data: XOR<TitreUpdateWithoutAgentsInput, TitreUncheckedUpdateWithoutAgentsInput>
  }

  export type TitreUpdateWithoutAgentsInput = {
    Intitule?: StringFieldUpdateOperationsInput | string
    salaire?: SalaireHeureUpdateOneRequiredWithoutTitresNestedInput
  }

  export type TitreUncheckedUpdateWithoutAgentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    Intitule?: StringFieldUpdateOperationsInput | string
    idSalaire?: IntFieldUpdateOperationsInput | number
  }

  export type PresenceUpsertWithWhereUniqueWithoutAgentInput = {
    where: PresenceWhereUniqueInput
    update: XOR<PresenceUpdateWithoutAgentInput, PresenceUncheckedUpdateWithoutAgentInput>
    create: XOR<PresenceCreateWithoutAgentInput, PresenceUncheckedCreateWithoutAgentInput>
  }

  export type PresenceUpdateWithWhereUniqueWithoutAgentInput = {
    where: PresenceWhereUniqueInput
    data: XOR<PresenceUpdateWithoutAgentInput, PresenceUncheckedUpdateWithoutAgentInput>
  }

  export type PresenceUpdateManyWithWhereWithoutAgentInput = {
    where: PresenceScalarWhereInput
    data: XOR<PresenceUpdateManyMutationInput, PresenceUncheckedUpdateManyWithoutAgentInput>
  }

  export type PresenceScalarWhereInput = {
    AND?: PresenceScalarWhereInput | PresenceScalarWhereInput[]
    OR?: PresenceScalarWhereInput[]
    NOT?: PresenceScalarWhereInput | PresenceScalarWhereInput[]
    id?: IntFilter<"Presence"> | number
    idAgent?: IntFilter<"Presence"> | number
    Date?: DateTimeFilter<"Presence"> | Date | string
    HeureArrivee?: DateTimeFilter<"Presence"> | Date | string
    HeureSortie?: DateTimeFilter<"Presence"> | Date | string
  }

  export type AgentMatinUpsertWithWhereUniqueWithoutAgentInput = {
    where: AgentMatinWhereUniqueInput
    update: XOR<AgentMatinUpdateWithoutAgentInput, AgentMatinUncheckedUpdateWithoutAgentInput>
    create: XOR<AgentMatinCreateWithoutAgentInput, AgentMatinUncheckedCreateWithoutAgentInput>
  }

  export type AgentMatinUpdateWithWhereUniqueWithoutAgentInput = {
    where: AgentMatinWhereUniqueInput
    data: XOR<AgentMatinUpdateWithoutAgentInput, AgentMatinUncheckedUpdateWithoutAgentInput>
  }

  export type AgentMatinUpdateManyWithWhereWithoutAgentInput = {
    where: AgentMatinScalarWhereInput
    data: XOR<AgentMatinUpdateManyMutationInput, AgentMatinUncheckedUpdateManyWithoutAgentInput>
  }

  export type AgentMatinScalarWhereInput = {
    AND?: AgentMatinScalarWhereInput | AgentMatinScalarWhereInput[]
    OR?: AgentMatinScalarWhereInput[]
    NOT?: AgentMatinScalarWhereInput | AgentMatinScalarWhereInput[]
    id?: IntFilter<"AgentMatin"> | number
    idAgent?: IntFilter<"AgentMatin"> | number
  }

  export type AgentSoireeUpsertWithWhereUniqueWithoutAgentInput = {
    where: AgentSoireeWhereUniqueInput
    update: XOR<AgentSoireeUpdateWithoutAgentInput, AgentSoireeUncheckedUpdateWithoutAgentInput>
    create: XOR<AgentSoireeCreateWithoutAgentInput, AgentSoireeUncheckedCreateWithoutAgentInput>
  }

  export type AgentSoireeUpdateWithWhereUniqueWithoutAgentInput = {
    where: AgentSoireeWhereUniqueInput
    data: XOR<AgentSoireeUpdateWithoutAgentInput, AgentSoireeUncheckedUpdateWithoutAgentInput>
  }

  export type AgentSoireeUpdateManyWithWhereWithoutAgentInput = {
    where: AgentSoireeScalarWhereInput
    data: XOR<AgentSoireeUpdateManyMutationInput, AgentSoireeUncheckedUpdateManyWithoutAgentInput>
  }

  export type AgentSoireeScalarWhereInput = {
    AND?: AgentSoireeScalarWhereInput | AgentSoireeScalarWhereInput[]
    OR?: AgentSoireeScalarWhereInput[]
    NOT?: AgentSoireeScalarWhereInput | AgentSoireeScalarWhereInput[]
    id?: IntFilter<"AgentSoiree"> | number
    idAgent?: IntFilter<"AgentSoiree"> | number
  }

  export type AgentCreateWithoutPresencesInput = {
    Nom: string
    PostNom: string
    Prenom: string
    Matricule: string
    Mdp?: string
    Telehone?: string
    Status?: boolean
    departement: DepartementCreateNestedOneWithoutAgentsInput
    titre: TitreCreateNestedOneWithoutAgentsInput
    agentMatin?: AgentMatinCreateNestedManyWithoutAgentInput
    agentSoiree?: AgentSoireeCreateNestedManyWithoutAgentInput
  }

  export type AgentUncheckedCreateWithoutPresencesInput = {
    id?: number
    Nom: string
    PostNom: string
    Prenom: string
    Matricule: string
    Mdp?: string
    Telehone?: string
    Status?: boolean
    idDepartement: number
    idTitre: number
    agentMatin?: AgentMatinUncheckedCreateNestedManyWithoutAgentInput
    agentSoiree?: AgentSoireeUncheckedCreateNestedManyWithoutAgentInput
  }

  export type AgentCreateOrConnectWithoutPresencesInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutPresencesInput, AgentUncheckedCreateWithoutPresencesInput>
  }

  export type AgentUpsertWithoutPresencesInput = {
    update: XOR<AgentUpdateWithoutPresencesInput, AgentUncheckedUpdateWithoutPresencesInput>
    create: XOR<AgentCreateWithoutPresencesInput, AgentUncheckedCreateWithoutPresencesInput>
    where?: AgentWhereInput
  }

  export type AgentUpdateToOneWithWhereWithoutPresencesInput = {
    where?: AgentWhereInput
    data: XOR<AgentUpdateWithoutPresencesInput, AgentUncheckedUpdateWithoutPresencesInput>
  }

  export type AgentUpdateWithoutPresencesInput = {
    Nom?: StringFieldUpdateOperationsInput | string
    PostNom?: StringFieldUpdateOperationsInput | string
    Prenom?: StringFieldUpdateOperationsInput | string
    Matricule?: StringFieldUpdateOperationsInput | string
    Mdp?: StringFieldUpdateOperationsInput | string
    Telehone?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    departement?: DepartementUpdateOneRequiredWithoutAgentsNestedInput
    titre?: TitreUpdateOneRequiredWithoutAgentsNestedInput
    agentMatin?: AgentMatinUpdateManyWithoutAgentNestedInput
    agentSoiree?: AgentSoireeUpdateManyWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateWithoutPresencesInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    PostNom?: StringFieldUpdateOperationsInput | string
    Prenom?: StringFieldUpdateOperationsInput | string
    Matricule?: StringFieldUpdateOperationsInput | string
    Mdp?: StringFieldUpdateOperationsInput | string
    Telehone?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    idDepartement?: IntFieldUpdateOperationsInput | number
    idTitre?: IntFieldUpdateOperationsInput | number
    agentMatin?: AgentMatinUncheckedUpdateManyWithoutAgentNestedInput
    agentSoiree?: AgentSoireeUncheckedUpdateManyWithoutAgentNestedInput
  }

  export type AgentCreateWithoutAgentMatinInput = {
    Nom: string
    PostNom: string
    Prenom: string
    Matricule: string
    Mdp?: string
    Telehone?: string
    Status?: boolean
    departement: DepartementCreateNestedOneWithoutAgentsInput
    titre: TitreCreateNestedOneWithoutAgentsInput
    presences?: PresenceCreateNestedManyWithoutAgentInput
    agentSoiree?: AgentSoireeCreateNestedManyWithoutAgentInput
  }

  export type AgentUncheckedCreateWithoutAgentMatinInput = {
    id?: number
    Nom: string
    PostNom: string
    Prenom: string
    Matricule: string
    Mdp?: string
    Telehone?: string
    Status?: boolean
    idDepartement: number
    idTitre: number
    presences?: PresenceUncheckedCreateNestedManyWithoutAgentInput
    agentSoiree?: AgentSoireeUncheckedCreateNestedManyWithoutAgentInput
  }

  export type AgentCreateOrConnectWithoutAgentMatinInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutAgentMatinInput, AgentUncheckedCreateWithoutAgentMatinInput>
  }

  export type AgentUpsertWithoutAgentMatinInput = {
    update: XOR<AgentUpdateWithoutAgentMatinInput, AgentUncheckedUpdateWithoutAgentMatinInput>
    create: XOR<AgentCreateWithoutAgentMatinInput, AgentUncheckedCreateWithoutAgentMatinInput>
    where?: AgentWhereInput
  }

  export type AgentUpdateToOneWithWhereWithoutAgentMatinInput = {
    where?: AgentWhereInput
    data: XOR<AgentUpdateWithoutAgentMatinInput, AgentUncheckedUpdateWithoutAgentMatinInput>
  }

  export type AgentUpdateWithoutAgentMatinInput = {
    Nom?: StringFieldUpdateOperationsInput | string
    PostNom?: StringFieldUpdateOperationsInput | string
    Prenom?: StringFieldUpdateOperationsInput | string
    Matricule?: StringFieldUpdateOperationsInput | string
    Mdp?: StringFieldUpdateOperationsInput | string
    Telehone?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    departement?: DepartementUpdateOneRequiredWithoutAgentsNestedInput
    titre?: TitreUpdateOneRequiredWithoutAgentsNestedInput
    presences?: PresenceUpdateManyWithoutAgentNestedInput
    agentSoiree?: AgentSoireeUpdateManyWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateWithoutAgentMatinInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    PostNom?: StringFieldUpdateOperationsInput | string
    Prenom?: StringFieldUpdateOperationsInput | string
    Matricule?: StringFieldUpdateOperationsInput | string
    Mdp?: StringFieldUpdateOperationsInput | string
    Telehone?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    idDepartement?: IntFieldUpdateOperationsInput | number
    idTitre?: IntFieldUpdateOperationsInput | number
    presences?: PresenceUncheckedUpdateManyWithoutAgentNestedInput
    agentSoiree?: AgentSoireeUncheckedUpdateManyWithoutAgentNestedInput
  }

  export type AgentCreateWithoutAgentSoireeInput = {
    Nom: string
    PostNom: string
    Prenom: string
    Matricule: string
    Mdp?: string
    Telehone?: string
    Status?: boolean
    departement: DepartementCreateNestedOneWithoutAgentsInput
    titre: TitreCreateNestedOneWithoutAgentsInput
    presences?: PresenceCreateNestedManyWithoutAgentInput
    agentMatin?: AgentMatinCreateNestedManyWithoutAgentInput
  }

  export type AgentUncheckedCreateWithoutAgentSoireeInput = {
    id?: number
    Nom: string
    PostNom: string
    Prenom: string
    Matricule: string
    Mdp?: string
    Telehone?: string
    Status?: boolean
    idDepartement: number
    idTitre: number
    presences?: PresenceUncheckedCreateNestedManyWithoutAgentInput
    agentMatin?: AgentMatinUncheckedCreateNestedManyWithoutAgentInput
  }

  export type AgentCreateOrConnectWithoutAgentSoireeInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutAgentSoireeInput, AgentUncheckedCreateWithoutAgentSoireeInput>
  }

  export type AgentUpsertWithoutAgentSoireeInput = {
    update: XOR<AgentUpdateWithoutAgentSoireeInput, AgentUncheckedUpdateWithoutAgentSoireeInput>
    create: XOR<AgentCreateWithoutAgentSoireeInput, AgentUncheckedCreateWithoutAgentSoireeInput>
    where?: AgentWhereInput
  }

  export type AgentUpdateToOneWithWhereWithoutAgentSoireeInput = {
    where?: AgentWhereInput
    data: XOR<AgentUpdateWithoutAgentSoireeInput, AgentUncheckedUpdateWithoutAgentSoireeInput>
  }

  export type AgentUpdateWithoutAgentSoireeInput = {
    Nom?: StringFieldUpdateOperationsInput | string
    PostNom?: StringFieldUpdateOperationsInput | string
    Prenom?: StringFieldUpdateOperationsInput | string
    Matricule?: StringFieldUpdateOperationsInput | string
    Mdp?: StringFieldUpdateOperationsInput | string
    Telehone?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    departement?: DepartementUpdateOneRequiredWithoutAgentsNestedInput
    titre?: TitreUpdateOneRequiredWithoutAgentsNestedInput
    presences?: PresenceUpdateManyWithoutAgentNestedInput
    agentMatin?: AgentMatinUpdateManyWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateWithoutAgentSoireeInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    PostNom?: StringFieldUpdateOperationsInput | string
    Prenom?: StringFieldUpdateOperationsInput | string
    Matricule?: StringFieldUpdateOperationsInput | string
    Mdp?: StringFieldUpdateOperationsInput | string
    Telehone?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    idDepartement?: IntFieldUpdateOperationsInput | number
    idTitre?: IntFieldUpdateOperationsInput | number
    presences?: PresenceUncheckedUpdateManyWithoutAgentNestedInput
    agentMatin?: AgentMatinUncheckedUpdateManyWithoutAgentNestedInput
  }

  export type AgentCreateManyDepartementInput = {
    id?: number
    Nom: string
    PostNom: string
    Prenom: string
    Matricule: string
    Mdp?: string
    Telehone?: string
    Status?: boolean
    idTitre: number
  }

  export type AgentUpdateWithoutDepartementInput = {
    Nom?: StringFieldUpdateOperationsInput | string
    PostNom?: StringFieldUpdateOperationsInput | string
    Prenom?: StringFieldUpdateOperationsInput | string
    Matricule?: StringFieldUpdateOperationsInput | string
    Mdp?: StringFieldUpdateOperationsInput | string
    Telehone?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    titre?: TitreUpdateOneRequiredWithoutAgentsNestedInput
    presences?: PresenceUpdateManyWithoutAgentNestedInput
    agentMatin?: AgentMatinUpdateManyWithoutAgentNestedInput
    agentSoiree?: AgentSoireeUpdateManyWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateWithoutDepartementInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    PostNom?: StringFieldUpdateOperationsInput | string
    Prenom?: StringFieldUpdateOperationsInput | string
    Matricule?: StringFieldUpdateOperationsInput | string
    Mdp?: StringFieldUpdateOperationsInput | string
    Telehone?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    idTitre?: IntFieldUpdateOperationsInput | number
    presences?: PresenceUncheckedUpdateManyWithoutAgentNestedInput
    agentMatin?: AgentMatinUncheckedUpdateManyWithoutAgentNestedInput
    agentSoiree?: AgentSoireeUncheckedUpdateManyWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateManyWithoutDepartementInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    PostNom?: StringFieldUpdateOperationsInput | string
    Prenom?: StringFieldUpdateOperationsInput | string
    Matricule?: StringFieldUpdateOperationsInput | string
    Mdp?: StringFieldUpdateOperationsInput | string
    Telehone?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    idTitre?: IntFieldUpdateOperationsInput | number
  }

  export type TitreCreateManySalaireInput = {
    id?: number
    Intitule: string
  }

  export type TitreUpdateWithoutSalaireInput = {
    Intitule?: StringFieldUpdateOperationsInput | string
    agents?: AgentUpdateManyWithoutTitreNestedInput
  }

  export type TitreUncheckedUpdateWithoutSalaireInput = {
    id?: IntFieldUpdateOperationsInput | number
    Intitule?: StringFieldUpdateOperationsInput | string
    agents?: AgentUncheckedUpdateManyWithoutTitreNestedInput
  }

  export type TitreUncheckedUpdateManyWithoutSalaireInput = {
    id?: IntFieldUpdateOperationsInput | number
    Intitule?: StringFieldUpdateOperationsInput | string
  }

  export type AgentCreateManyTitreInput = {
    id?: number
    Nom: string
    PostNom: string
    Prenom: string
    Matricule: string
    Mdp?: string
    Telehone?: string
    Status?: boolean
    idDepartement: number
  }

  export type AgentUpdateWithoutTitreInput = {
    Nom?: StringFieldUpdateOperationsInput | string
    PostNom?: StringFieldUpdateOperationsInput | string
    Prenom?: StringFieldUpdateOperationsInput | string
    Matricule?: StringFieldUpdateOperationsInput | string
    Mdp?: StringFieldUpdateOperationsInput | string
    Telehone?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    departement?: DepartementUpdateOneRequiredWithoutAgentsNestedInput
    presences?: PresenceUpdateManyWithoutAgentNestedInput
    agentMatin?: AgentMatinUpdateManyWithoutAgentNestedInput
    agentSoiree?: AgentSoireeUpdateManyWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateWithoutTitreInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    PostNom?: StringFieldUpdateOperationsInput | string
    Prenom?: StringFieldUpdateOperationsInput | string
    Matricule?: StringFieldUpdateOperationsInput | string
    Mdp?: StringFieldUpdateOperationsInput | string
    Telehone?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    idDepartement?: IntFieldUpdateOperationsInput | number
    presences?: PresenceUncheckedUpdateManyWithoutAgentNestedInput
    agentMatin?: AgentMatinUncheckedUpdateManyWithoutAgentNestedInput
    agentSoiree?: AgentSoireeUncheckedUpdateManyWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateManyWithoutTitreInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    PostNom?: StringFieldUpdateOperationsInput | string
    Prenom?: StringFieldUpdateOperationsInput | string
    Matricule?: StringFieldUpdateOperationsInput | string
    Mdp?: StringFieldUpdateOperationsInput | string
    Telehone?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    idDepartement?: IntFieldUpdateOperationsInput | number
  }

  export type PresenceCreateManyAgentInput = {
    id?: number
    Date: Date | string
    HeureArrivee: Date | string
    HeureSortie: Date | string
  }

  export type AgentMatinCreateManyAgentInput = {
    id?: number
  }

  export type AgentSoireeCreateManyAgentInput = {
    id?: number
  }

  export type PresenceUpdateWithoutAgentInput = {
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    HeureArrivee?: DateTimeFieldUpdateOperationsInput | Date | string
    HeureSortie?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresenceUncheckedUpdateWithoutAgentInput = {
    id?: IntFieldUpdateOperationsInput | number
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    HeureArrivee?: DateTimeFieldUpdateOperationsInput | Date | string
    HeureSortie?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresenceUncheckedUpdateManyWithoutAgentInput = {
    id?: IntFieldUpdateOperationsInput | number
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    HeureArrivee?: DateTimeFieldUpdateOperationsInput | Date | string
    HeureSortie?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentMatinUpdateWithoutAgentInput = {

  }

  export type AgentMatinUncheckedUpdateWithoutAgentInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type AgentMatinUncheckedUpdateManyWithoutAgentInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type AgentSoireeUpdateWithoutAgentInput = {

  }

  export type AgentSoireeUncheckedUpdateWithoutAgentInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type AgentSoireeUncheckedUpdateManyWithoutAgentInput = {
    id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}